{"ast":null,"code":"import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\n\nvar ExcelExport =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid Excel Export module.\n   * @hidden\n   */\n  function ExcelExport(parent, locator) {\n    /* tslint:disable-next-line:no-any */\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.isCsvExport = false;\n    this.isElementIdChanged = false;\n    this.foreignKeyData = {};\n    this.gridPool = {};\n    this.parent = parent;\n    this.helper = new ExportHelper(parent);\n    this.locator = locator;\n    this.l10n = this.locator.getService('localization');\n  }\n  /**\n   * For internal use only - Get the module name.\n   */\n\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'ExcelExport';\n  };\n\n  ExcelExport.prototype.init = function (gObj) {\n    if (gObj.element !== null && gObj.element.id === '') {\n      gObj.element.id = new Date().toISOString();\n      this.isElementIdChanged = true;\n    }\n\n    this.parent = gObj;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.isExporting = undefined;\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.footer = undefined;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n    gObj.id = getUid('main-grid');\n    this.gridPool[gObj.id] = false;\n  };\n  /**\n   * Export Grid to Excel file.\n   * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n   * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n   * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.\n   * @param  {isCsv} isCsv - true if export to CSV.\n   * @return {Promise<any>}\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n    var gObj = grid;\n    var cancel = 'cancel';\n    var isBlb = 'isBlob';\n    var csv = 'isCsv';\n    var workbk = 'workbook';\n    var isMultiEx = 'isMultipleExport';\n    this.gridPool = {};\n\n    if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n      grid.expandedRows = getPrintGridModel(grid).expandedRows;\n    }\n\n    var args = {\n      requestType: 'beforeExcelExport',\n      gridObject: gObj,\n      cancel: false,\n      isMultipleExport: isMultipleExport,\n      workbook: workbook,\n      isCsv: isCsv,\n      isBlob: isBlob\n    };\n    gObj.trigger(events.beforeExcelExport, args);\n\n    if (args[cancel]) {\n      return new Promise(function (resolve, reject) {\n        return resolve();\n      });\n    }\n\n    this.parent.log('exporting_begin', this.getModuleName());\n    this.data = new Data(gObj);\n    this.isExporting = true;\n    this.isBlob = args[isBlb];\n\n    if (args[csv]) {\n      this.isCsvExport = args[csv];\n    } else {\n      this.isCsvExport = false;\n    }\n\n    if (isExportColumns(exportProperties)) {\n      updateColumnTypeForExportColumns(exportProperties, gObj);\n    }\n\n    return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n  };\n\n  ExcelExport.prototype.exportingSuccess = function (resolve) {\n    this.isExporting = false;\n    this.parent.trigger(events.excelExportComplete, this.isBlob ? {\n      promise: this.blobPromise\n    } : {});\n    this.parent.log('exporting_complete', this.getModuleName());\n    resolve(this.book);\n  };\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n    var _this = this;\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {\n      if (!(exportProperties.dataSource instanceof DataManager)) {\n        exportProperties.dataSource = new DataManager(exportProperties.dataSource);\n      }\n\n      var query_1 = exportProperties.query ? exportProperties.query : new Query();\n\n      if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n        query_1.isCountRequired = true;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var dataManager = exportProperties.dataSource.executeQuery(query_1);\n        dataManager.then(function (r) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        });\n      });\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      return new Promise(function (resolve, reject) {\n        _this.init(gObj);\n\n        _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n\n        _this.exportingSuccess(resolve);\n      });\n    } else {\n      var allPromise_1 = [];\n      allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n      allPromise_1.push(this.helper.getColumnData(gObj));\n      return new Promise(function (resolve, reject) {\n        Promise.all(allPromise_1).then(function (e) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        }).catch(function (e) {\n          reject(_this.book);\n\n          _this.parent.trigger(events.actionFailure, e);\n        });\n      });\n    }\n  };\n  /* tslint:disable-next-line:max-func-body-length */\n\n\n  ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties,\n  /* tslint:disable-next-line:no-any */\n  isMultipleExport, workbook, r) {\n    var _this = this;\n\n    this.groupedColLength = gObj.groupSettings.columns.length;\n    var blankRows = 5;\n    var separator;\n    var rows = [];\n    var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n\n    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n      /* tslint:disable-next-line:max-line-length */\n      this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet';\n\n      if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n        blankRows = exportProperties.multipleExport.blankRows;\n      }\n    }\n\n    if (isNullOrUndefined(workbook)) {\n      this.workSheet = [];\n      this.rows = [];\n      this.columns = [];\n      this.styles = [];\n    } else if (this.expType === 'NewSheet') {\n      this.workSheet = workbook.worksheets;\n      this.rows = [];\n      this.columns = [];\n      this.styles = workbook.styles;\n    } else {\n      this.workSheet = [];\n      this.rows = workbook.worksheets[0].rows;\n      this.columns = workbook.worksheets[0].columns;\n      this.styles = workbook.styles;\n      this.rowLength = this.rows[this.rows.length - 1].index + blankRows;\n      this.rowLength++;\n    }\n\n    if (isExportPropertiesPresent) {\n      if (!isNullOrUndefined(isMultipleExport)) {\n        if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          if (this.expType === 'AppendToSheet') {\n            if (!isMultipleExport) {\n              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n            }\n          } else {\n            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n          }\n        }\n      } else {\n        if (!isNullOrUndefined(exportProperties.header)) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n        }\n      }\n    }\n\n    this.includeHiddenColumn = isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false;\n    return new Promise(function (resolve, reject) {\n      gObj.childGridLevel = 0;\n      rows = _this.processGridExport(gObj, exportProperties, r);\n      _this.globalResolve = resolve;\n      _this.gridPool[gObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n    }).then(function () {\n      var organisedRows = [];\n\n      _this.organiseRows(rows, rows[0].index, organisedRows);\n\n      _this.rows = _this.rows.concat(organisedRows); //footer template add\n\n      if (!isNullOrUndefined(_this.footer)) {\n        if (_this.expType === 'AppendToSheet' && !isMultipleExport || _this.expType === 'NewSheet') {\n          _this.processExcelFooter(_this.footer);\n        }\n      }\n\n      var sheet = {};\n\n      if (_this.columns.length > 0) {\n        sheet.columns = _this.columns;\n      }\n      /* tslint:disable-next-line:no-any */\n\n\n      sheet.rows = _this.rows;\n      sheet.enableRtl = _this.parent.enableRtl;\n\n      _this.workSheet.push(sheet);\n\n      _this.book.worksheets = _this.workSheet;\n      _this.book.styles = _this.styles;\n      gObj.notify('finalPageSetup', _this.book);\n\n      if (!isMultipleExport) {\n        if (_this.isCsvExport) {\n          if (isBlazor() && gObj.isServerRendered) {\n            _this.book.isServerRendered = gObj.isServerRendered;\n          }\n\n          if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator) && exportProperties.separator !== ',') {\n            separator = exportProperties.separator;\n          }\n          /* tslint:disable-next-line:max-line-length */\n\n\n          var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.csv');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('text/csv');\n          }\n        } else {\n          var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n\n          if (!_this.isBlob) {\n            if (isExportPropertiesPresent && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.xlsx');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n          }\n        }\n\n        if (_this.isElementIdChanged) {\n          gObj.element.id = '';\n        }\n\n        delete gObj.expandedRows;\n      }\n\n      return workbook;\n    });\n  };\n\n  ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n    if (!rows.length) {\n      return initialIndex;\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      var childRows = row.childRows;\n\n      if (childRows) {\n        row.index = initialIndex++;\n        delete row.childRows;\n        organisedRows.push(row);\n        initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n      } else {\n        row.index = initialIndex++;\n        organisedRows.push(row);\n      }\n    }\n\n    return initialIndex;\n  };\n\n  ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n    var excelRows = [];\n    var isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n      this.theme = exportProperties.theme;\n    }\n\n    if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n      gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n    }\n\n    var helper = new ExportHelper(gObj);\n    var gColumns = isExportColumns(exportProperties) ? prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) : helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);\n    var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n    var groupIndent = gObj.groupSettings.columns.length;\n    excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n    /* tslint:disable-next-line:max-line-length */\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n    } else {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n    }\n\n    gObj.notify(events.exportDataBound, {\n      excelRows: excelRows,\n      type: 'excel'\n    });\n    return excelRows;\n  };\n\n  ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n    var record;\n\n    if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n      record = currentViewRecords;\n    } else {\n      record = returnType.result;\n    }\n\n    if (!isNullOrUndefined(record.level)) {\n      this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n    } else {\n      this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n    }\n\n    if (!isNullOrUndefined(returnType.aggregates)) {\n      if (!isNullOrUndefined(currentViewRecords)) {\n        this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n      } else {\n        var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;\n        this.processAggregates(gObj, result, excelRow);\n      }\n    }\n\n    return excelRow;\n  };\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n      var item = dataSource_1[_i];\n      var cells = [];\n      var index = 1;\n      /* tslint:disable-next-line:no-any */\n\n      var cell = {};\n      cell.index = index + level;\n      var col = gObj.getColumnByField(item.field);\n      /* tslint:disable-next-line:no-any */\n\n      var args = {\n        value: item.key,\n        column: col,\n        style: undefined,\n        isForeignKey: col.isForeignColumn()\n      };\n      var value = gObj.getColumnByField(item.field).headerText + ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n\n      if (item.count > 1) {\n        value += item.count + ' items';\n      } else {\n        value += item.count + ' item';\n      }\n\n      var cArgs = {\n        captionText: value,\n        type: this.isCsvExport ? 'CSV' : 'Excel'\n      };\n      this.parent.trigger(events.exportGroupCaption, cArgs);\n      cell.value = cArgs.captionText;\n      cell.style = this.getCaptionThemeStyle(this.theme);\n      var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n      var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n      this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n      cells.push(cell);\n\n      if (excelRows[excelRows.length - 1].cells.length > 0) {\n        var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n        var hIndex = 0;\n\n        for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n          var tCell = _b[_a];\n\n          if (tCell.index < lIndex) {\n            lIndex = tCell.index;\n          }\n\n          if (tCell.index > hIndex) {\n            hIndex = tCell.index;\n          }\n\n          if (cells[cells.length - 1].index !== tCell.index) {\n            cells.push(tCell);\n          }\n        }\n\n        if (lIndex - cell.index > 1) {\n          cell.colSpan = lIndex - cell.index;\n        }\n\n        while (hIndex < headerRow.columns.length + level + dataSource.childLevels) {\n          /* tslint:disable-next-line:no-any */\n          var sCell = {};\n          sCell.index = hIndex + 1;\n          sCell.style = this.getCaptionThemeStyle(this.theme);\n          cells.push(sCell);\n          hIndex++;\n        }\n      } else {\n        var span = 0; //Calculation for column span when group caption dont have aggregates\n\n        for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n          var col_1 = _d[_c];\n\n          if (col_1.visible) {\n            span++;\n          }\n        }\n\n        cell.colSpan = dataSource.childLevels + span;\n      }\n\n      excelRows[excelRows.length - 1].cells = cells;\n      this.rowLength++;\n\n      if (this.groupedColLength < 8 && level > 1) {\n        var grouping = {\n          outlineLevel: level - 1,\n          isCollapsed: true\n        };\n        excelRows[excelRows.length - 1].grouping = grouping;\n      }\n\n      if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n        this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n      } else {\n        startIndex = this.processRecordRows(gObj, item.items, headerRow, level, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level, true);\n      }\n    }\n  };\n\n  ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    var index = 1;\n    var cells = [];\n    var columns = headerRow.columns;\n    var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      cells = [];\n      startIndex++;\n      index = 1;\n\n      for (var c = 0, len = row.cells.length; c < len; c++) {\n        var gCell = row.cells[c];\n\n        if (gCell.cellType !== CellType.Data) {\n          continue;\n        }\n\n        var column = gCell.column;\n        var field = column.field;\n        var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n        var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n        var fkData = void 0;\n\n        if (column.isForeignColumn && column.isForeignColumn()) {\n          fkData = helper.getFData(value, column);\n          value = getValue(column.foreignKeyValue, fkData);\n        }\n\n        if (!isNullOrUndefined(value)) {\n          var cell = {};\n          /* tslint:disable-next-line:no-any */\n\n          var excelCellArgs = {\n            data: row.data,\n            column: column,\n            foreignKeyData: fkData,\n            value: value,\n            style: undefined,\n            colSpan: 1,\n            cell: cell\n          };\n          gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n          cell = excelCellArgs.cell;\n          cell.index = index + level + gObj.childGridLevel;\n          cell.value = excelCellArgs.value;\n\n          if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n            var style = {};\n            style.hAlign = 'left';\n            excelCellArgs = {\n              style: style\n            };\n            cell.colSpan = gObj.getVisibleColumns().length;\n            cell.value = this.l10n.getConstant('EmptyRecord');\n          }\n\n          if (excelCellArgs.colSpan > 1) {\n            cell.colSpan = excelCellArgs.colSpan;\n          }\n\n          if (!isNullOrUndefined(excelCellArgs.style)) {\n            var styleIndex = this.getColumnStyle(gObj, index + level);\n            cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n          } else {\n            cell.style = {\n              name: gObj.element.id + 'column' + (index + level)\n            };\n          }\n\n          cells.push(cell);\n        }\n\n        index++;\n      }\n\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n\n      if (this.groupedColLength < 8 && level > 0) {\n        excelRow.grouping = {\n          outlineLevel: level,\n          isCollapsed: true\n        };\n        excelRows.push(excelRow);\n      } else {\n        excelRows.push(excelRow);\n      }\n\n      if (!isNullOrUndefined(gObj.childGrid)) {\n        gObj.isPrinting = true;\n        var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : 'AllPages';\n        var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n        var childGridObj = returnVal.childGrid;\n        var element = returnVal.element;\n        childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n        childGridObj.childGridLevel = gObj.childGridLevel + 1;\n        var args = {\n          childGrid: childGridObj,\n          row: row,\n          exportProperties: excelExportProperties\n        };\n        this.parent.trigger(events.exportDetailDataBound, args);\n        childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n        childGridObj.appendTo(element);\n      }\n\n      gObj.notify(events.exportRowDataBound, {\n        rowObj: row,\n        type: 'excel',\n        excelRows: excelRows\n      });\n    }\n\n    return startIndex;\n  };\n\n  ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n    var _this = this;\n\n    return function (result) {\n      childGridObj.beforeDataBound = null;\n      result.cancel = true;\n\n      if (result.result.length === 0) {\n        result.result = [''];\n      }\n\n      excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n      var intent = _this.parent.groupSettings.columns.length;\n      var rows = excelRow.childRows;\n\n      for (var i = 0; i < rows.length; i++) {\n        rows[i].grouping = {\n          outlineLevel: intent + childGridObj.childGridLevel,\n          isCollapsed: !gRow.isExpand,\n          isHidden: !gRow.isExpand\n        };\n      }\n\n      childGridObj.destroy();\n      detach(childGridObj.element);\n      _this.gridPool[childGridObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n\n      return excelRow;\n    };\n  }; // tslint:disable-next-line:max-line-length\n\n\n  ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n    var summaryModel = new SummaryModelGenerator(gObj);\n    var columns = summaryModel.getColumns();\n    columns = columns.filter(function (col) {\n      return isNullOrUndefined(col.commands) && col.type !== 'checkbox';\n    });\n\n    if (gObj.aggregates.length && this.parent !== gObj) {\n      gObj.aggregateModule.prepareSummaryInfo();\n    }\n\n    var data = undefined;\n\n    if (!isNullOrUndefined(currentViewRecords)) {\n      data = currentViewRecords;\n    } else {\n      data = rec;\n    }\n\n    if (indent === undefined) {\n      indent = 0;\n    }\n\n    if (gObj.groupSettings.columns.length > 0 && byGroup) {\n      var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n      var groupSummaryRows = groupSummaryModel.generateRows(data, {\n        level: data.level\n      });\n\n      if (groupSummaryRows.length > 0) {\n        excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n      }\n    } else {\n      indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n      var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n\n      if (sRows.length > 0 && !byGroup) {\n        excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n      }\n    }\n\n    return excelRows;\n  }; // tslint:disable-next-line:max-line-length\n\n\n  ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n    for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n      var row = rows_2[_i];\n      var cells = [];\n      var index = 0;\n\n      for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n        var cell = _b[_a];\n        /* tslint:disable-next-line:no-any */\n\n        var eCell = {};\n\n        if (cell.cellType === CellType.DetailFooterIntent) {\n          continue;\n        }\n\n        if (cell.visible || this.includeHiddenColumn) {\n          index++;\n\n          if (cell.isDataCell) {\n            var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n            var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n            var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n            eCell.index = index + indent + gObj.childGridLevel;\n\n            if (footerTemplate) {\n              eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n            } else if (groupFooterTemplate) {\n              eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n            } else if (groupCaptionTemplate) {\n              eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n            } else {\n              for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                var key = _d[_c];\n\n                if (key === cell.column.type) {\n                  if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                    eCell.value = row.data[cell.column.field].Custom;\n                  }\n                }\n              }\n            }\n\n            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n            this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n            var gridCellStyle = cell.attributes.style;\n\n            if (gridCellStyle.textAlign) {\n              eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n            }\n\n            var args = {\n              row: row,\n              type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n              style: eCell\n            };\n            this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n            cells.push(eCell);\n          } else {\n            if (customIndex === undefined) {\n              eCell.index = index + indent + gObj.childGridLevel;\n              eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n              cells.push(eCell);\n            }\n          }\n        }\n      }\n\n      if (!isNullOrUndefined(customIndex)) {\n        excelRows.push({\n          index: customIndex,\n          cells: cells\n        });\n      } else {\n        var row_1 = {};\n\n        if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n          var dummyOutlineLevel = 'outlineLevel';\n          var dummyGrouping = 'grouping';\n          var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n          var grouping = {\n            outlineLevel: level,\n            isCollapsed: true\n          };\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells,\n            grouping: grouping\n          };\n        } else {\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells\n          };\n        }\n\n        excelRows.push(row_1);\n      }\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n    var column = this.parent.getColumnByField(field);\n\n    if (typeof col.format === 'object') {\n      var format = col.format;\n      style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n      if (!isNullOrUndefined(format.type)) {\n        style.type = format.type.toLowerCase();\n      }\n    } else {\n      style.numberFormat = col.format;\n    }\n\n    if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n      style.type = column.type.toLowerCase();\n    }\n  };\n\n  ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n    var templateFn = {};\n    templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n    var txt;\n    var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n\n    if (this.parent.isReact || this.parent.isVue) {\n      txt = templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent);\n\n      if (this.parent.isReact) {\n        this.parent.renderTemplates();\n      }\n    } else {\n      txt = templateFn[getEnumValue(CellType, cell.cellType)](data);\n    }\n\n    return txt[0].textContent;\n  };\n\n  ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n    var result = {};\n    var attrname = Object.keys(JSON1);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON1[attrname[index]];\n      }\n    }\n\n    attrname = Object.keys(JSON2);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON2[attrname[index]];\n      }\n    }\n\n    return result;\n  };\n\n  ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n    var index = 0;\n\n    for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n      var style = _a[_i];\n\n      if (style.name === gObj.element.id + 'column' + columnIndex) {\n        return index;\n      }\n\n      index++;\n    }\n\n    return undefined;\n  };\n\n  ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n    var rowIndex = 1;\n    var gridRows = headerRow.rows; // Column collection with respect to the records in the grid\n\n    var gridColumns = headerRow.columns;\n    var spannedCells = [];\n\n    if (indent > 0) {\n      var index = 0;\n\n      while (index !== indent) {\n        this.columns.push({\n          index: index + 1,\n          width: 30\n        });\n        index++;\n      }\n    }\n\n    for (var row = 0; row < gridRows.length; row++) {\n      var currentCellIndex = 1 + indent;\n      var cells = [];\n\n      for (var column = 0; column < gridRows[row].cells.length; column++) {\n        /* tslint:disable-next-line:no-any */\n        var style = {};\n        var cell = {};\n        var gridCell = gridRows[row].cells[column];\n\n        if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n          continue;\n        }\n\n        var result = {\n          contains: true,\n          index: 1\n        };\n\n        while (result.contains) {\n          result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n          currentCellIndex = result.index;\n\n          if (!result.contains) {\n            cell.index = result.index + gObj.childGridLevel;\n            break;\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n          cell.rowSpan = gridCell.rowSpan;\n\n          for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n            var spannedCell = {\n              rowIndex: 0,\n              columnIndex: 0\n            };\n            spannedCell.rowIndex = i;\n            spannedCell.columnIndex = currentCellIndex;\n            spannedCells.push(spannedCell);\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n          cell.colSpan = gridCell.colSpan;\n          currentCellIndex = currentCellIndex + cell.colSpan - 1;\n        }\n\n        cell.value = gridCell.column.headerText;\n        style = this.getHeaderThemeStyle(this.theme);\n\n        if (!isNullOrUndefined(gridCell.column.textAlign)) {\n          style.hAlign = gridCell.column.textAlign.toLowerCase();\n        }\n\n        if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n          style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n        }\n\n        var excelHeaderCellArgs = {\n          cell: cell,\n          gridCell: gridCell,\n          style: style\n        };\n        gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n        cell.style = excelHeaderCellArgs.style;\n        cells.push(cell);\n        currentCellIndex++;\n      }\n\n      excelRows.push({\n        index: this.rowLength++,\n        cells: cells\n      });\n    }\n\n    for (var col = 0; col < gridColumns.length; col++) {\n      this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 12;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    style.bold = true;\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n      style = this.updateThemeStyle(theme.header, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n    return extend(style, themestyle);\n  };\n\n  ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.backColor = '#F6F6F6';\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n      style = this.updateThemeStyle(theme.caption, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n      style = this.updateThemeStyle(theme.record, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.processExcelHeader = function (header) {\n    if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n      var noRows = void 0;\n\n      if (header.headerRows === undefined) {\n        this.rowLength = header.rows.length;\n      } else {\n        this.rowLength = header.headerRows;\n      }\n\n      if (this.rowLength < header.rows.length) {\n        noRows = this.rowLength;\n      } else {\n        noRows = header.rows.length;\n      }\n\n      this.rowLength++;\n\n      for (var row = 0; row < noRows; row++) {\n        var json = header.rows[row]; //Row index\n\n        if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n          json.index = row + 1;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.updatedCellIndex = function (json) {\n    var cellsLength = json.cells.length;\n\n    for (var cellId = 0; cellId < cellsLength; cellId++) {\n      var jsonCell = json.cells[cellId]; //cell index\n\n      if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n        jsonCell.index = cellId + 1;\n      }\n    }\n\n    this.rows.push(json);\n  };\n\n  ExcelExport.prototype.processExcelFooter = function (footer) {\n    if (!isNullOrUndefined(footer.rows)) {\n      var noRows = void 0;\n\n      if (footer.footerRows === undefined) {\n        this.rowLength += footer.rows.length;\n      } else {\n        if (footer.footerRows > footer.rows.length) {\n          this.rowLength += footer.footerRows - footer.rows.length;\n          noRows = footer.rows.length;\n        } else {\n          noRows = footer.footerRows;\n        }\n      }\n\n      for (var row = 0; row < noRows; row++) {\n        var json = footer.rows[row]; //Row index\n\n        if (json.index === null || json.index === undefined) {\n          json.index = this.rowLength++;\n        } else {\n          json.index += this.rowLength;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n    for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n      var spannedCell = spannedCells_1[_i];\n\n      if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {\n        columnIndex = columnIndex + 1;\n        return {\n          contains: true,\n          index: columnIndex\n        };\n      }\n    }\n\n    return {\n      contains: false,\n      index: columnIndex\n    };\n  };\n\n  ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n    if (!isNullOrUndefined(col.format)) {\n      if (typeof col.format === 'object') {\n        var format = col.format;\n        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n        if (!isNullOrUndefined(format.type)) {\n          style.type = format.type.toLowerCase();\n        }\n      } else {\n        style.numberFormat = col.format;\n        style.type = col.type;\n      }\n    }\n\n    if (!isNullOrUndefined(col.textAlign)) {\n      style.hAlign = col.textAlign.toLowerCase();\n    }\n\n    if (Object.keys(style).length > 0) {\n      style.name = gObj.element.id + 'column' + index;\n      this.styles.push(style);\n    }\n\n    if (!isNullOrUndefined(col.width)) {\n      this.columns.push({\n        index: index + gObj.childGridLevel,\n        width: typeof col.width === 'number' ? col.width : this.helper.getConvertedWidth(col.width)\n      });\n    }\n  };\n  /**\n   * To destroy the excel export\n   * @return {void}\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.destroy = function () {//destroy for exporting\n  };\n\n  return ExcelExport;\n}();\n\nexport { ExcelExport };","map":{"version":3,"sources":["C:/Users/appsk/Documents/Projects/PredictiveMaintenance/React PDM/env/frontend/node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js"],"names":["events","Workbook","isNullOrUndefined","getEnumValue","compile","getValue","detach","extend","isBlazor","Data","ExportHelper","ExportValueFormatter","SummaryModelGenerator","GroupSummaryModelGenerator","CaptionSummaryModelGenerator","CellType","Query","DataManager","getPrintGridModel","getUid","isExportColumns","updateColumnTypeForExportColumns","prepareColumns","ExcelExport","parent","locator","book","workSheet","rows","columns","styles","rowLength","expType","includeHiddenColumn","isCsvExport","isElementIdChanged","foreignKeyData","gridPool","helper","l10n","getService","prototype","getModuleName","init","gObj","element","id","Date","toISOString","isDestroyed","isExporting","undefined","footer","exportValueFormatter","locale","Map","grid","exportProperties","isMultipleExport","workbook","isCsv","isBlob","cancel","isBlb","csv","workbk","isMultiEx","childGrid","hierarchyExportMode","expandedRows","args","requestType","gridObject","trigger","beforeExcelExport","Promise","resolve","reject","log","data","processRecords","exportingSuccess","excelExportComplete","promise","blobPromise","_this","dataSource","query_1","query","isCountRequired","aggregates","dataManager","executeQuery","then","r","processInnerRecords","exportType","getCurrentViewRecords","allPromise_1","push","getData","getQuery","getColumnData","all","e","catch","actionFailure","groupedColLength","groupSettings","length","blankRows","separator","isExportPropertiesPresent","multipleExport","type","worksheets","index","header","processExcelHeader","JSON","parse","stringify","childGridLevel","processGridExport","globalResolve","checkAndExport","organisedRows","organiseRows","concat","processExcelFooter","sheet","enableRtl","notify","isServerRendered","currencyCode","fileName","save","saveAsBlob","initialIndex","i","row","childRows","excelRows","isFrozen","isFrozenGrid","getFrozenColumns","theme","hierarchyPrintMode","gColumns","enableColumnVirtualization","getGridExportColumns","getColumns","headerRow","getHeaders","groupIndent","processHeaderContent","processRecordContent","currentViewData","exportDataBound","returnType","currentViewRecords","excelRow","record","result","level","processGroupedRows","processRecordRows","processAggregates","GroupGuid","records","startIndex","excelExportProperties","_i","dataSource_1","item","cells","cell","col","getColumnByField","field","value","key","column","style","isForeignKey","isForeignColumn","headerText","enableGroupByFormat","formatCellValue","count","cArgs","captionText","exportGroupCaption","getCaptionThemeStyle","captionModelGen","groupCaptionSummaryRows","generateRows","fillAggregates","childLevels","lIndex","hIndex","_a","_b","tCell","colSpan","sCell","span","_c","_d","col_1","visible","grouping","outlineLevel","isCollapsed","items","getGridRowModel","rows_1","c","len","gCell","cellType","cellValue","valueAccessor","fkData","getFData","foreignKeyValue","excelCellArgs","excelQueryCellInfo","hAlign","getVisibleColumns","getConstant","styleIndex","getColumnStyle","mergeOptions","name","isPrinting","returnVal","createChildGrid","childGridObj","failureHandler","exportDetailDataBound","beforeDataBound","childGridCell","appendTo","exportRowDataBound","rowObj","excelExportProps","gRow","intent","isExpand","isHidden","destroy","rec","indent","byGroup","summaryModel","filter","commands","aggregateModule","prepareSummaryInfo","groupSummaryModel","groupSummaryRows","sRows","customIndex","rows_2","eCell","DetailFooterIntent","isDataCell","footerTemplate","groupFooterTemplate","groupCaptionTemplate","getAggreateValue","Summary","GroupSummary","CaptionSummary","Object","keys","Sum","Average","Max","Min","Count","TrueCount","FalseCount","Custom","aggregateStyle","gridCellStyle","attributes","textAlign","toLowerCase","excelAggregateQueryCellInfo","row_1","dummyOutlineLevel","dummyGrouping","format","numberFormat","skeleton","template","templateFn","txt","columnName","isReact","isVue","renderTemplates","textContent","JSON1","JSON2","attrname","columnIndex","rowIndex","gridRows","gridColumns","spannedCells","width","currentCellIndex","gridCell","HeaderIndent","DetailHeader","contains","getIndex","rowSpan","spannedCell","getHeaderThemeStyle","headerTextAlign","excelHeaderCellArgs","excelHeaderQueryCellInfo","parseStyles","getRecordThemeStyle","fontSize","borders","color","bold","updateThemeStyle","themestyle","backColor","caption","noRows","headerRows","json","updatedCellIndex","cellsLength","cellId","jsonCell","footerRows","spannedCells_1","getConvertedWidth"],"mappings":"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","sourcesContent":["import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid, isExportColumns, updateColumnTypeForExportColumns, prepareColumns } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid Excel Export module.\n     * @hidden\n     */\n    function ExcelExport(parent, locator) {\n        /* tslint:disable-next-line:no-any */\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.isCsvExport = false;\n        this.isElementIdChanged = false;\n        this.foreignKeyData = {};\n        this.gridPool = {};\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n        this.locator = locator;\n        this.l10n = this.locator.getService('localization');\n    }\n    /**\n     * For internal use only - Get the module name.\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    ExcelExport.prototype.init = function (gObj) {\n        if (gObj.element !== null && gObj.element.id === '') {\n            gObj.element.id = new Date().toISOString();\n            this.isElementIdChanged = true;\n        }\n        this.parent = gObj;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.isExporting = undefined;\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.footer = undefined;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n        gObj.id = getUid('main-grid');\n        this.gridPool[gObj.id] = false;\n    };\n    /**\n     * Export Grid to Excel file.\n     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n     * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.\n     * @param  {isCsv} isCsv - true if export to CSV.\n     * @return {Promise<any>}\n     */\n    /* tslint:disable-next-line:max-line-length */\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n        var gObj = grid;\n        var cancel = 'cancel';\n        var isBlb = 'isBlob';\n        var csv = 'isCsv';\n        var workbk = 'workbook';\n        var isMultiEx = 'isMultipleExport';\n        this.gridPool = {};\n        if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n            grid.expandedRows = getPrintGridModel(grid).expandedRows;\n        }\n        var args = {\n            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,\n            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob\n        };\n        gObj.trigger(events.beforeExcelExport, args);\n        if (args[cancel]) {\n            return new Promise(function (resolve, reject) {\n                return resolve();\n            });\n        }\n        this.parent.log('exporting_begin', this.getModuleName());\n        this.data = new Data(gObj);\n        this.isExporting = true;\n        this.isBlob = args[isBlb];\n        if (args[csv]) {\n            this.isCsvExport = args[csv];\n        }\n        else {\n            this.isCsvExport = false;\n        }\n        if (isExportColumns(exportProperties)) {\n            updateColumnTypeForExportColumns(exportProperties, gObj);\n        }\n        return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n    };\n    ExcelExport.prototype.exportingSuccess = function (resolve) {\n        this.isExporting = false;\n        this.parent.trigger(events.excelExportComplete, this.isBlob ? { promise: this.blobPromise } : {});\n        this.parent.log('exporting_complete', this.getModuleName());\n        resolve(this.book);\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n        var _this = this;\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource)) {\n            if (!(exportProperties.dataSource instanceof DataManager)) {\n                exportProperties.dataSource = new DataManager(exportProperties.dataSource);\n            }\n            var query_1 = exportProperties.query ? exportProperties.query : new Query();\n            if (isNullOrUndefined(query_1.isCountRequired) || gObj.aggregates) {\n                query_1.isCountRequired = true;\n            }\n            return new Promise(function (resolve, reject) {\n                var dataManager = exportProperties.dataSource.executeQuery(query_1);\n                dataManager.then(function (r) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                });\n            });\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            return new Promise(function (resolve, reject) {\n                _this.init(gObj);\n                _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n                _this.exportingSuccess(resolve);\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n            allPromise_1.push(this.helper.getColumnData(gObj));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                }).catch(function (e) {\n                    reject(_this.book);\n                    _this.parent.trigger(events.actionFailure, e);\n                });\n            });\n        }\n    };\n    /* tslint:disable-next-line:max-func-body-length */\n    ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, \n    /* tslint:disable-next-line:no-any */\n    isMultipleExport, workbook, r) {\n        var _this = this;\n        this.groupedColLength = gObj.groupSettings.columns.length;\n        var blankRows = 5;\n        var separator;\n        var rows = [];\n        var isExportPropertiesPresent = !isNullOrUndefined(exportProperties);\n        if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {\n            /* tslint:disable-next-line:max-line-length */\n            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');\n            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n                blankRows = exportProperties.multipleExport.blankRows;\n            }\n        }\n        if (isNullOrUndefined(workbook)) {\n            this.workSheet = [];\n            this.rows = [];\n            this.columns = [];\n            this.styles = [];\n        }\n        else if (this.expType === 'NewSheet') {\n            this.workSheet = workbook.worksheets;\n            this.rows = [];\n            this.columns = [];\n            this.styles = workbook.styles;\n        }\n        else {\n            this.workSheet = [];\n            this.rows = workbook.worksheets[0].rows;\n            this.columns = workbook.worksheets[0].columns;\n            this.styles = workbook.styles;\n            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);\n            this.rowLength++;\n        }\n        if (isExportPropertiesPresent) {\n            if (!isNullOrUndefined(isMultipleExport)) {\n                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    if (this.expType === 'AppendToSheet') {\n                        if (!isMultipleExport) {\n                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                        }\n                    }\n                    else {\n                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                    }\n                }\n            }\n            else {\n                if (!isNullOrUndefined(exportProperties.header)) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                }\n            }\n        }\n        this.includeHiddenColumn = (isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false);\n        return new Promise(function (resolve, reject) {\n            gObj.childGridLevel = 0;\n            rows = _this.processGridExport(gObj, exportProperties, r);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            var organisedRows = [];\n            _this.organiseRows(rows, rows[0].index, organisedRows);\n            _this.rows = _this.rows.concat(organisedRows);\n            //footer template add\n            if (!isNullOrUndefined(_this.footer)) {\n                if ((_this.expType === 'AppendToSheet' && !isMultipleExport) || (_this.expType === 'NewSheet')) {\n                    _this.processExcelFooter(_this.footer);\n                }\n            }\n            var sheet = {};\n            if (_this.columns.length > 0) {\n                sheet.columns = _this.columns;\n            }\n            /* tslint:disable-next-line:no-any */\n            sheet.rows = _this.rows;\n            sheet.enableRtl = _this.parent.enableRtl;\n            _this.workSheet.push(sheet);\n            _this.book.worksheets = _this.workSheet;\n            _this.book.styles = _this.styles;\n            gObj.notify('finalPageSetup', _this.book);\n            if (!isMultipleExport) {\n                if (_this.isCsvExport) {\n                    if (isBlazor() && gObj.isServerRendered) {\n                        _this.book.isServerRendered = gObj.isServerRendered;\n                    }\n                    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator)\n                        && exportProperties.separator !== ',') {\n                        separator = exportProperties.separator;\n                    }\n                    /* tslint:disable-next-line:max-line-length */\n                    var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode, separator);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.csv');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('text/csv');\n                    }\n                }\n                else {\n                    var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n                    if (!_this.isBlob) {\n                        if (isExportPropertiesPresent && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.xlsx');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n                    }\n                }\n                if (_this.isElementIdChanged) {\n                    gObj.element.id = '';\n                }\n                delete gObj.expandedRows;\n            }\n            return workbook;\n        });\n    };\n    ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n        if (!rows.length) {\n            return initialIndex;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            var childRows = row.childRows;\n            if (childRows) {\n                row.index = initialIndex++;\n                delete row.childRows;\n                organisedRows.push(row);\n                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n            }\n            else {\n                row.index = initialIndex++;\n                organisedRows.push(row);\n            }\n        }\n        return initialIndex;\n    };\n    ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n        var excelRows = [];\n        var isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n            this.theme = exportProperties.theme;\n        }\n        if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n        }\n        var helper = new ExportHelper(gObj);\n        var gColumns = isExportColumns(exportProperties) ?\n            prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) :\n            helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);\n        var headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);\n        var groupIndent = gObj.groupSettings.columns.length;\n        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n        /* tslint:disable-next-line:max-line-length */\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n        }\n        else {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n        }\n        gObj.notify(events.exportDataBound, { excelRows: excelRows, type: 'excel' });\n        return excelRows;\n    };\n    ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n        var record;\n        if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {\n            record = currentViewRecords;\n        }\n        else {\n            record = returnType.result;\n        }\n        if (!isNullOrUndefined(record.level)) {\n            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n        }\n        else {\n            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n        }\n        if (!isNullOrUndefined(returnType.aggregates)) {\n            if (!isNullOrUndefined(currentViewRecords)) {\n                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n            }\n            else {\n                var result = returnType.result.GroupGuid ?\n                    returnType.result.records : returnType.result;\n                this.processAggregates(gObj, result, excelRow);\n            }\n        }\n        return excelRow;\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var item = dataSource_1[_i];\n            var cells = [];\n            var index = 1;\n            /* tslint:disable-next-line:no-any */\n            var cell = {};\n            cell.index = index + level;\n            var col = gObj.getColumnByField(item.field);\n            /* tslint:disable-next-line:no-any */\n            var args = {\n                value: item.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn(),\n            };\n            var value = gObj.getColumnByField(item.field).headerText +\n                ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n            if (item.count > 1) {\n                value += item.count + ' items';\n            }\n            else {\n                value += item.count + ' item';\n            }\n            var cArgs = { captionText: value, type: this.isCsvExport ? 'CSV' : 'Excel' };\n            this.parent.trigger(events.exportGroupCaption, cArgs);\n            cell.value = cArgs.captionText;\n            cell.style = this.getCaptionThemeStyle(this.theme);\n            var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n            var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n            this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n            cells.push(cell);\n            if (excelRows[excelRows.length - 1].cells.length > 0) {\n                var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n                var hIndex = 0;\n                for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n                    var tCell = _b[_a];\n                    if (tCell.index < lIndex) {\n                        lIndex = tCell.index;\n                    }\n                    if (tCell.index > hIndex) {\n                        hIndex = tCell.index;\n                    }\n                    if (cells[cells.length - 1].index !== tCell.index) {\n                        cells.push(tCell);\n                    }\n                }\n                if ((lIndex - cell.index) > 1) {\n                    cell.colSpan = lIndex - cell.index;\n                }\n                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {\n                    /* tslint:disable-next-line:no-any */\n                    var sCell = {};\n                    sCell.index = (hIndex + 1);\n                    sCell.style = this.getCaptionThemeStyle(this.theme);\n                    cells.push(sCell);\n                    hIndex++;\n                }\n            }\n            else {\n                var span = 0;\n                //Calculation for column span when group caption dont have aggregates\n                for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n                    var col_1 = _d[_c];\n                    if (col_1.visible) {\n                        span++;\n                    }\n                }\n                cell.colSpan = (dataSource.childLevels + span);\n            }\n            excelRows[excelRows.length - 1].cells = cells;\n            this.rowLength++;\n            if (this.groupedColLength < 8 && level > 1) {\n                var grouping = { outlineLevel: level - 1, isCollapsed: true };\n                excelRows[excelRows.length - 1].grouping = grouping;\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n            }\n            else {\n                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level), startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level), true);\n            }\n        }\n    };\n    ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        var index = 1;\n        var cells = [];\n        var columns = headerRow.columns;\n        var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            cells = [];\n            startIndex++;\n            index = 1;\n            for (var c = 0, len = row.cells.length; c < len; c++) {\n                var gCell = row.cells[c];\n                if (gCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                var fkData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    fkData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, fkData);\n                }\n                if (!isNullOrUndefined(value)) {\n                    var cell = {};\n                    /* tslint:disable-next-line:no-any */\n                    var excelCellArgs = {\n                        data: row.data, column: column, foreignKeyData: fkData,\n                        value: value, style: undefined, colSpan: 1, cell: cell\n                    };\n                    gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n                    cell = excelCellArgs.cell;\n                    cell.index = index + level + gObj.childGridLevel;\n                    cell.value = excelCellArgs.value;\n                    if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n                        var style = {};\n                        style.hAlign = 'left';\n                        excelCellArgs = { style: style };\n                        cell.colSpan = gObj.getVisibleColumns().length;\n                        cell.value = this.l10n.getConstant('EmptyRecord');\n                    }\n                    if (excelCellArgs.colSpan > 1) {\n                        cell.colSpan = excelCellArgs.colSpan;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.style)) {\n                        var styleIndex = this.getColumnStyle(gObj, index + level);\n                        cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n                    }\n                    else {\n                        cell.style = { name: gObj.element.id + 'column' + (index + level) };\n                    }\n                    cells.push(cell);\n                }\n                index++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (this.groupedColLength < 8 && level > 0) {\n                excelRow.grouping = { outlineLevel: level, isCollapsed: true };\n                excelRows.push(excelRow);\n            }\n            else {\n                excelRows.push(excelRow);\n            }\n            if (!isNullOrUndefined(gObj.childGrid)) {\n                gObj.isPrinting = true;\n                var exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?\n                    excelExportProperties.exportType : 'AllPages';\n                var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                var childGridObj = returnVal.childGrid;\n                var element = returnVal.element;\n                childGridObj.actionFailure =\n                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                childGridObj.childGridLevel = gObj.childGridLevel + 1;\n                var args = { childGrid: childGridObj, row: row, exportProperties: excelExportProperties };\n                this.parent.trigger(events.exportDetailDataBound, args);\n                childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n                childGridObj.appendTo(element);\n            }\n            gObj.notify(events.exportRowDataBound, { rowObj: row, type: 'excel', excelRows: excelRows });\n        }\n        return startIndex;\n    };\n    ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            if (result.result.length === 0) {\n                result.result = [''];\n            }\n            excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n            var intent = _this.parent.groupSettings.columns.length;\n            var rows = excelRow.childRows;\n            for (var i = 0; i < rows.length; i++) {\n                rows[i].grouping = { outlineLevel: intent + childGridObj.childGridLevel,\n                    isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };\n            }\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return excelRow;\n        };\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n        var summaryModel = new SummaryModelGenerator(gObj);\n        var columns = summaryModel.getColumns();\n        columns = columns.filter(function (col) { return isNullOrUndefined(col.commands) && col.type !== 'checkbox'; });\n        if (gObj.aggregates.length && this.parent !== gObj) {\n            gObj.aggregateModule.prepareSummaryInfo();\n        }\n        var data = undefined;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            data = currentViewRecords;\n        }\n        else {\n            data = rec;\n        }\n        if (indent === undefined) {\n            indent = 0;\n        }\n        if (gObj.groupSettings.columns.length > 0 && byGroup) {\n            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n            var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });\n            if (groupSummaryRows.length > 0) {\n                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n            }\n        }\n        else {\n            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n            var sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);\n            if (sRows.length > 0 && !byGroup) {\n                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n            }\n        }\n        return excelRows;\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            var cells = [];\n            var index = 0;\n            for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n                var cell = _b[_a];\n                /* tslint:disable-next-line:no-any */\n                var eCell = {};\n                if (cell.cellType === CellType.DetailFooterIntent) {\n                    continue;\n                }\n                if ((cell.visible || this.includeHiddenColumn)) {\n                    index++;\n                    if (cell.isDataCell) {\n                        var footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);\n                        var groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);\n                        var groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);\n                        eCell.index = index + indent + gObj.childGridLevel;\n                        if (footerTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n                        }\n                        else if (groupFooterTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n                        }\n                        else if (groupCaptionTemplate) {\n                            eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n                        }\n                        else {\n                            for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                                var key = _d[_c];\n                                if (key === cell.column.type) {\n                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                                        eCell.value = row.data[cell.column.field].Custom;\n                                    }\n                                }\n                            }\n                        }\n                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                        this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n                        var gridCellStyle = cell.attributes.style;\n                        if (gridCellStyle.textAlign) {\n                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n                        }\n                        var args = {\n                            row: row,\n                            type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',\n                            style: eCell\n                        };\n                        this.parent.trigger(events.excelAggregateQueryCellInfo, args);\n                        cells.push(eCell);\n                    }\n                    else {\n                        if (customIndex === undefined) {\n                            eCell.index = index + indent + gObj.childGridLevel;\n                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                            cells.push(eCell);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(customIndex)) {\n                excelRows.push({ index: customIndex, cells: cells });\n            }\n            else {\n                var row_1 = {};\n                if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n                    var dummyOutlineLevel = 'outlineLevel';\n                    var dummyGrouping = 'grouping';\n                    var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n                    var grouping = { outlineLevel: level, isCollapsed: true };\n                    row_1 = { index: this.rowLength++, cells: cells, grouping: grouping };\n                }\n                else {\n                    row_1 = { index: this.rowLength++, cells: cells };\n                }\n                excelRows.push(row_1);\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n        var column = this.parent.getColumnByField(field);\n        if (typeof col.format === 'object') {\n            var format = col.format;\n            style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n            if (!isNullOrUndefined(format.type)) {\n                style.type = format.type.toLowerCase();\n            }\n        }\n        else {\n            style.numberFormat = col.format;\n        }\n        if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n            style.type = column.type.toLowerCase();\n        }\n    };\n    ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n        var templateFn = {};\n        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n        var txt;\n        var data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];\n        if (this.parent.isReact || this.parent.isVue) {\n            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent));\n            if (this.parent.isReact) {\n                this.parent.renderTemplates();\n            }\n        }\n        else {\n            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data));\n        }\n        return txt[0].textContent;\n    };\n    ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n        var result = {};\n        var attrname = Object.keys(JSON1);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON1[attrname[index]];\n            }\n        }\n        attrname = Object.keys(JSON2);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON2[attrname[index]];\n            }\n        }\n        return result;\n    };\n    ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n        var index = 0;\n        for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            if (style.name === gObj.element.id + 'column' + columnIndex) {\n                return index;\n            }\n            index++;\n        }\n        return undefined;\n    };\n    ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n        var rowIndex = 1;\n        var gridRows = headerRow.rows;\n        // Column collection with respect to the records in the grid\n        var gridColumns = headerRow.columns;\n        var spannedCells = [];\n        if (indent > 0) {\n            var index = 0;\n            while (index !== indent) {\n                this.columns.push({ index: index + 1, width: 30 });\n                index++;\n            }\n        }\n        for (var row = 0; row < gridRows.length; row++) {\n            var currentCellIndex = 1 + indent;\n            var cells = [];\n            for (var column = 0; column < gridRows[row].cells.length; column++) {\n                /* tslint:disable-next-line:no-any */\n                var style = {};\n                var cell = {};\n                var gridCell = gridRows[row].cells[column];\n                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n                    continue;\n                }\n                var result = { contains: true, index: 1 };\n                while (result.contains) {\n                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n                    currentCellIndex = result.index;\n                    if (!result.contains) {\n                        cell.index = result.index + gObj.childGridLevel;\n                        break;\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n                    cell.rowSpan = gridCell.rowSpan;\n                    for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n                        var spannedCell = { rowIndex: 0, columnIndex: 0 };\n                        spannedCell.rowIndex = i;\n                        spannedCell.columnIndex = currentCellIndex;\n                        spannedCells.push(spannedCell);\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n                    cell.colSpan = gridCell.colSpan;\n                    currentCellIndex = currentCellIndex + cell.colSpan - 1;\n                }\n                cell.value = gridCell.column.headerText;\n                style = this.getHeaderThemeStyle(this.theme);\n                if (!isNullOrUndefined(gridCell.column.textAlign)) {\n                    style.hAlign = gridCell.column.textAlign.toLowerCase();\n                }\n                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n                }\n                var excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };\n                gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n                cell.style = excelHeaderCellArgs.style;\n                cells.push(cell);\n                currentCellIndex++;\n            }\n            excelRows.push({ index: this.rowLength++, cells: cells });\n        }\n        for (var col = 0; col < gridColumns.length; col++) {\n            this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 12;\n        style.borders = { color: '#E0E0E0' };\n        style.bold = true;\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n            style = this.updateThemeStyle(theme.header, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n        return extend(style, themestyle);\n    };\n    ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.backColor = '#F6F6F6';\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n            style = this.updateThemeStyle(theme.caption, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.borders = { color: '#E0E0E0' };\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n            style = this.updateThemeStyle(theme.record, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.processExcelHeader = function (header) {\n        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n            var noRows = void 0;\n            if (header.headerRows === undefined) {\n                this.rowLength = header.rows.length;\n            }\n            else {\n                this.rowLength = header.headerRows;\n            }\n            if (this.rowLength < header.rows.length) {\n                noRows = this.rowLength;\n            }\n            else {\n                noRows = header.rows.length;\n            }\n            this.rowLength++;\n            for (var row = 0; row < noRows; row++) {\n                var json = header.rows[row];\n                //Row index\n                if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n                    json.index = (row + 1);\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.updatedCellIndex = function (json) {\n        var cellsLength = json.cells.length;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            var jsonCell = json.cells[cellId];\n            //cell index\n            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n                jsonCell.index = (cellId + 1);\n            }\n        }\n        this.rows.push(json);\n    };\n    ExcelExport.prototype.processExcelFooter = function (footer) {\n        if (!isNullOrUndefined(footer.rows)) {\n            var noRows = void 0;\n            if (footer.footerRows === undefined) {\n                this.rowLength += footer.rows.length;\n            }\n            else {\n                if (footer.footerRows > footer.rows.length) {\n                    this.rowLength += (footer.footerRows - footer.rows.length);\n                    noRows = footer.rows.length;\n                }\n                else {\n                    noRows = footer.footerRows;\n                }\n            }\n            for (var row = 0; row < noRows; row++) {\n                var json = footer.rows[row];\n                //Row index\n                if (json.index === null || json.index === undefined) {\n                    json.index = this.rowLength++;\n                }\n                else {\n                    json.index += this.rowLength;\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n        for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n            var spannedCell = spannedCells_1[_i];\n            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {\n                columnIndex = columnIndex + 1;\n                return { contains: true, index: columnIndex };\n            }\n        }\n        return { contains: false, index: columnIndex };\n    };\n    ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n        if (!isNullOrUndefined(col.format)) {\n            if (typeof col.format === 'object') {\n                var format = col.format;\n                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n                if (!isNullOrUndefined(format.type)) {\n                    style.type = format.type.toLowerCase();\n                }\n            }\n            else {\n                style.numberFormat = col.format;\n                style.type = col.type;\n            }\n        }\n        if (!isNullOrUndefined(col.textAlign)) {\n            style.hAlign = col.textAlign.toLowerCase();\n        }\n        if (Object.keys(style).length > 0) {\n            style.name = gObj.element.id + 'column' + index;\n            this.styles.push(style);\n        }\n        if (!isNullOrUndefined(col.width)) {\n            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?\n                    col.width : this.helper.getConvertedWidth(col.width) });\n        }\n    };\n    /**\n     * To destroy the excel export\n     * @return {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"]},"metadata":{},"sourceType":"module"}