{"ast":null,"code":"import { RowModelGenerator } from '../services/row-model-generator';\nimport { isBlazor } from '@syncfusion/ej2-base';\nimport { getFrozenTableName, splitFrozenRowObjectCells } from '../base/util';\n/**\n * FreezeRowModelGenerator is used to generate grid data rows with freeze row and column.\n * @hidden\n */\n\nvar FreezeRowModelGenerator =\n/** @class */\nfunction () {\n  function FreezeRowModelGenerator(parent) {\n    this.parent = parent;\n    this.rowModelGenerator = new RowModelGenerator(this.parent);\n  }\n\n  FreezeRowModelGenerator.prototype.generateRows = function (data, notifyArgs, virtualRows) {\n    var frzCols = this.parent.getFrozenColumns();\n    var tableName = getFrozenTableName(this.parent);\n    frzCols = frzCols && this.parent.isRowDragable() ? frzCols + 1 : frzCols;\n\n    if (notifyArgs.requestType === 'virtualscroll' && notifyArgs.virtualInfo.sentinelInfo.axis === 'X') {\n      if (tableName !== 'movable') {\n        return null;\n      }\n    }\n\n    var row = this.parent.enableVirtualization && !notifyArgs.isFrozenRowsRender ? virtualRows : this.rowModelGenerator.generateRows(data, notifyArgs);\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      return row;\n    }\n\n    for (var i = 0, len = row.length; i < len; i++) {\n      row[i].cells = splitFrozenRowObjectCells(this.parent, row[i].cells, tableName);\n    }\n\n    return row;\n  };\n\n  return FreezeRowModelGenerator;\n}();\n\nexport { FreezeRowModelGenerator };","map":{"version":3,"sources":["C:/Users/appsk/Documents/Projects/PredictiveMaintenance/React PDM/env/frontend/node_modules/@syncfusion/ej2-grids/src/grid/services/freeze-row-model-generator.js"],"names":["RowModelGenerator","isBlazor","getFrozenTableName","splitFrozenRowObjectCells","FreezeRowModelGenerator","parent","rowModelGenerator","prototype","generateRows","data","notifyArgs","virtualRows","frzCols","getFrozenColumns","tableName","isRowDragable","requestType","virtualInfo","sentinelInfo","axis","row","enableVirtualization","isFrozenRowsRender","isJsComponent","i","len","length","cells"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,iCAAlC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,kBAAT,EAA6BC,yBAA7B,QAA8D,cAA9D;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB;AAAG;AAAe,YAAY;AACrD,WAASA,uBAAT,CAAiCC,MAAjC,EAAyC;AACrC,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,iBAAL,GAAyB,IAAIN,iBAAJ,CAAsB,KAAKK,MAA3B,CAAzB;AACH;;AACDD,EAAAA,uBAAuB,CAACG,SAAxB,CAAkCC,YAAlC,GAAiD,UAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,WAA5B,EAAyC;AACtF,QAAIC,OAAO,GAAG,KAAKP,MAAL,CAAYQ,gBAAZ,EAAd;AACA,QAAIC,SAAS,GAAGZ,kBAAkB,CAAC,KAAKG,MAAN,CAAlC;AACAO,IAAAA,OAAO,GAAGA,OAAO,IAAI,KAAKP,MAAL,CAAYU,aAAZ,EAAX,GAAyCH,OAAO,GAAG,CAAnD,GAAuDA,OAAjE;;AACA,QAAIF,UAAU,CAACM,WAAX,KAA2B,eAA3B,IAA8CN,UAAU,CAACO,WAAX,CAAuBC,YAAvB,CAAoCC,IAApC,KAA6C,GAA/F,EAAoG;AAChG,UAAIL,SAAS,KAAK,SAAlB,EAA6B;AACzB,eAAO,IAAP;AACH;AACJ;;AACD,QAAIM,GAAG,GAAG,KAAKf,MAAL,CAAYgB,oBAAZ,IAAoC,CAACX,UAAU,CAACY,kBAAhD,GAAqEX,WAArE,GACJ,KAAKL,iBAAL,CAAuBE,YAAvB,CAAoCC,IAApC,EAA0CC,UAA1C,CADN;;AAEA,QAAIT,QAAQ,MAAM,CAAC,KAAKI,MAAL,CAAYkB,aAA/B,EAA8C;AAC1C,aAAOH,GAAP;AACH;;AACD,SAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGL,GAAG,CAACM,MAA1B,EAAkCF,CAAC,GAAGC,GAAtC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5CJ,MAAAA,GAAG,CAACI,CAAD,CAAH,CAAOG,KAAP,GAAexB,yBAAyB,CAAC,KAAKE,MAAN,EAAce,GAAG,CAACI,CAAD,CAAH,CAAOG,KAArB,EAA4Bb,SAA5B,CAAxC;AACH;;AACD,WAAOM,GAAP;AACH,GAlBD;;AAmBA,SAAOhB,uBAAP;AACH,CAzB4C,EAA7C;;AA0BA,SAASA,uBAAT","sourcesContent":["import { RowModelGenerator } from '../services/row-model-generator';\nimport { isBlazor } from '@syncfusion/ej2-base';\nimport { getFrozenTableName, splitFrozenRowObjectCells } from '../base/util';\n/**\n * FreezeRowModelGenerator is used to generate grid data rows with freeze row and column.\n * @hidden\n */\nvar FreezeRowModelGenerator = /** @class */ (function () {\n    function FreezeRowModelGenerator(parent) {\n        this.parent = parent;\n        this.rowModelGenerator = new RowModelGenerator(this.parent);\n    }\n    FreezeRowModelGenerator.prototype.generateRows = function (data, notifyArgs, virtualRows) {\n        var frzCols = this.parent.getFrozenColumns();\n        var tableName = getFrozenTableName(this.parent);\n        frzCols = frzCols && this.parent.isRowDragable() ? frzCols + 1 : frzCols;\n        if (notifyArgs.requestType === 'virtualscroll' && notifyArgs.virtualInfo.sentinelInfo.axis === 'X') {\n            if (tableName !== 'movable') {\n                return null;\n            }\n        }\n        var row = this.parent.enableVirtualization && !notifyArgs.isFrozenRowsRender ? virtualRows\n            : this.rowModelGenerator.generateRows(data, notifyArgs);\n        if (isBlazor() && !this.parent.isJsComponent) {\n            return row;\n        }\n        for (var i = 0, len = row.length; i < len; i++) {\n            row[i].cells = splitFrozenRowObjectCells(this.parent, row[i].cells, tableName);\n        }\n        return row;\n    };\n    return FreezeRowModelGenerator;\n}());\nexport { FreezeRowModelGenerator };\n"]},"metadata":{},"sourceType":"module"}