{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\appsk\\\\Documents\\\\Projects\\\\PredictiveMaintenance\\\\React PDM\\\\env\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { Component, useState } from 'react';\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\nimport { SheetJSFT } from './types';\nimport { GridComponent, ColumnDirective, ColumnsDirective, Page, Inject, Filter, gridObserver } from '@syncfusion/ej2-react-grids';\nimport testData from './json.json';\n\nfunction App() {\n  _s();\n\n  // Preprocessed data state\n  const [preprocessedData, setData] = useState([]);\n\n  function updatepreprocessedDataState(e) {\n    setData(eq => (preprocessedData, e));\n  } // Equipment item state update\n\n\n  const [equipmentItems, setEq] = useState([]);\n\n  function updateEquipmentItemsState(e) {\n    setEq(eq => (equipmentItems, e));\n  }\n\n  const [equipmentLabel, setEquipmentLabel] = useState([]);\n\n  function updateEquipmentLabel(e) {\n    setEquipmentLabel(eq => (equipmentLabel, e));\n  } // Part number state update\n\n\n  const [partItems, setPart] = useState([]);\n\n  function updatePartNumberState(e) {\n    setPart(eq => (partItems, e));\n  }\n\n  const [partLabels, setPartLabels] = useState([]);\n\n  function updatePartLabels(e) {\n    setPartLabels(eq => (partLabels, e));\n  } // Code state update\n\n\n  const [codeItems, setCode] = useState([]);\n\n  function updateCodeState(e) {\n    setCode(eq => (codeItems, e));\n  }\n\n  const [codeLabels, setCodeLabels] = useState([]);\n\n  function updateCodeLabels(e) {\n    setCodeLabels(eq => (codeLabels, e));\n  } // Graph data\n\n\n  var graphLabel = [];\n  var pdmGraphCoordinates = []; // Graph states\n\n  const [graphLabels, setLabels] = useState([]);\n\n  function updateLabelState(e) {\n    setLabels(eq => (graphLabels, e));\n  }\n\n  const [graphCoordinatesTest, setCoordinates] = useState([]);\n\n  function updateCoordinateState(e) {\n    setCoordinates(eq => (graphCoordinatesTest, e));\n  } // Excel File properties\n\n\n  var file = {};\n  var data = [];\n  var cols = [];\n\n  const groupBy = require('json-groupby');\n\n  const selectionOptions = {\n    type: 'Multiple'\n  }; // TABLE FORMATING\n  //1. Equipment list Row Selection\n\n  let equipmentGrid = null;\n\n  const equipmentRowSelected = () => {\n    if (equipmentGrid) {\n      const eqLabel = equipmentGrid.getSelectedRecords()[0][\"Equipment ID\"];\n      updateEquipmentLabel(eqLabel);\n      const keys = Object.keys(preprocessedData[eqLabel]);\n      var partsList = [];\n      keys.forEach(function (item) {\n        partsList.push({\n          \"Part Number\": item\n        });\n      });\n      updatePartNumberState(partsList);\n      updateCodeState([]);\n    }\n  }; //2. Part Number Row selection\n\n\n  let partGrid = null;\n\n  const partRowSelected = () => {\n    if (partGrid) {\n      const eqLabel = equipmentLabel;\n      const partLabels = partGrid.getSelectedRecords();\n      updatePartLabels(partLabels);\n      var keys = [];\n      partLabels.forEach(function (part) {\n        const name = part[\"Part Number\"];\n        keys.push(...Object.keys(preprocessedData[eqLabel][name]));\n      });\n      keys = [...new Set(keys)];\n      var codesList = [];\n      keys.forEach(function (code) {\n        codesList.push({\n          \"Code\": code\n        });\n      });\n      updateCodeState(codesList);\n    }\n  }; //3. Repair Code Row selection\n\n\n  let rcodeGrid = null;\n\n  const rcodeRowSelected = () => {\n    if (rcodeGrid) {\n      const selectedRcodeLabel = rcodeGrid.getSelectedRecords();\n      updateCodeLabels(selectedRcodeLabel);\n    }\n  }; // Generate graph coordinates\n\n\n  function generateCrd(x, y) {\n    const coordinates = [];\n    var i;\n\n    for (i = 0; i < x.length; i++) {\n      const point = {\n        'x': x[i],\n        'y': y[i]\n      };\n      coordinates.push(point);\n    }\n\n    return coordinates;\n  }\n\n  function renderChart() {\n    // Load in Data\n    var xAxisData;\n    var yAxisData;\n    var graphCoordinates = [];\n    var parts = [];\n    partLabels.forEach(function (item) {\n      parts.push(item[\"Part Number\"]);\n    });\n    var codes = [];\n    codeLabels.forEach(function (item) {\n      codes.push(item[\"Code\"]);\n    });\n    parts.forEach(function (part) {\n      xAxisData = [];\n      yAxisData = [];\n      Object.keys(preprocessedData[equipmentLabel][part]).forEach(function (code) {\n        if (codes.includes(code)) {\n          preprocessedData[equipmentLabel][part][code].forEach(function (item) {\n            yAxisData.push(item[\"Code\"]);\n            xAxisData.push(new Date(new Date(item[\"Date\"]).toDateString()));\n          });\n        }\n      });\n      graphCoordinates.push(generateCrd(xAxisData, yAxisData));\n      console.log(graphCoordinates);\n    });\n    console.log(graphCoordinates);\n\n    var Chart = require('chart.js');\n\n    const ctx = document.getElementById('chart').getContext('2d');\n    const myChart = new Chart(ctx, {\n      type: 'scatter',\n      data: {\n        //labels: xAxisData,\n        datasets: [{\n          label: \"Part number: \" + parts[0],\n          data: graphCoordinates[0],\n          backgroundColor: \"#FF4136\",\n          borderColor: \"#FF4136\",\n          fill: false,\n          showLine: true,\n          borderWidth: 1\n        } //   ,\n        //   {\n        //     label: graphLabel[1],\n        //     data: pdmGraphCoordinates[1],\n        //     backgroundColor: \"#0074D9\",\n        //     borderColor: \"#0074D9\",\n        //     fill: false,\n        //     showLine: true,\n        //     borderWidth: 1\n        // }\n        ]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            type: 'time',\n            distribution: 'series',\n            time: {\n              unit: 'day',\n              displayFormats: {\n                quarter: 'll'\n              }\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  function download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], {\n      type: contentType\n    });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  function handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) file = files[0];\n  }\n\n  ;\n\n  function handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      data = XLSX.utils.sheet_to_json(ws, {\n        raw: false\n      });\n      cols = make_cols(ws['!ref']); // Preprocess data\n\n      const strData = JSON.stringify(data, null, 2);\n      var jsonObject = JSON.parse(strData);\n      var i;\n\n      for (i = 0; i < jsonObject.length; i++) {\n        if (!(\"Part Number\" in jsonObject[i] && \"Code\" in jsonObject[i] && \"Date\" in jsonObject[i])) {\n          delete jsonObject[i];\n        } else {\n          var d = new Date(jsonObject[i][\"Date\"]);\n\n          if (!jsonObject[i].Code.match(/^\\d+$/)) {\n            delete jsonObject[i];\n          } else if (isNaN(d.getMonth())) {\n            delete jsonObject[i];\n          }\n        }\n      }\n\n      const jsonRegroupedTest = groupBy(jsonObject, ['Equipment ID', 'Part Number']);\n      const jsonRegrouped = groupBy(jsonObject, ['Equipment ID', 'Part Number', 'Code']);\n      const equipmentComponentsList = Object.keys(jsonRegrouped);\n      var eqStateObject = [];\n      equipmentComponentsList.forEach(function (item) {\n        eqStateObject.push({\n          \"Equipment ID\": item\n        });\n      }); //Update states\n\n      updateEquipmentItemsState(eqStateObject);\n      updatepreprocessedDataState(jsonRegrouped);\n      console.log(jsonRegrouped); // Random data selection\n      //   for(i = 0; i < 2; i++) {\n      //     yAxisData = [];\n      //     xAxisData = [];\n      //   var keys = Object.keys(jsonRegroupedTest)\n      //   var randIndex = Math.floor(Math.random() * keys.length)\n      //   var randKey = keys[randIndex]\n      //   const randomGroup = jsonRegroupedTest[randKey]\n      //   var label = randKey + \" => \";\n      //   keys = Object.keys(randomGroup)\n      //   randIndex = Math.floor(Math.random() * keys.length)\n      //   randKey = keys[randIndex]\n      //   const randomGroup2 = randomGroup[randKey];\n      //   label += randKey;\n      //   graphLabel.push(label);\n      //   randomGroup2.forEach(function(item) {\n      //     yAxisData.push(item[\"Code\"]);\n      //     xAxisData.push(item[\"Date\"]);\n      //   })\n      //   pdmGraphCoordinates.push(generateCrd(xAxisData, yAxisData));\n      // }\n      // End of random data selection\n      //   renderChart();\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n\n    ;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file\",\n      children: \"Upload your Excel File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      id: \"file\",\n      accept: SheetJSFT,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Update\",\n      onClick: handleFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"EqID\",\n        style: {\n          marginTop: '20%',\n          margin: '10%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GridComponent, {\n          dataSource: equipmentItems,\n          allowPaging: true,\n          pageSettings: {\n            pageSize: 10\n          },\n          allowFiltering: true,\n          rowSelected: equipmentRowSelected,\n          ref: g => equipmentGrid = g,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Equipment ID\",\n              headerText: \"Equipment List\",\n              textAlign: \"Center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Page, Filter]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"PID\",\n        style: {\n          marginTop: '20%',\n          margin: '10%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GridComponent, {\n          dataSource: partItems,\n          allowPaging: true,\n          pageSettings: {\n            pageSize: 10\n          },\n          allowFiltering: true,\n          rowSelected: partRowSelected,\n          rowDeselected: partRowSelected,\n          ref: g => partGrid = g //selectionSettings={selectionOptions}\n          ,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              type: \"checkbox\",\n              width: \"50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Part Number\",\n              headerText: \"Part Number\",\n              textAlign: \"Center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Page, Filter]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"RC\",\n        style: {\n          marginTop: '20%',\n          margin: '10%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GridComponent, {\n          dataSource: codeItems,\n          allowPaging: true,\n          pageSettings: {\n            pageSize: 10\n          },\n          allowFiltering: true,\n          rowSelected: rcodeRowSelected,\n          ref: g => rcodeGrid = g //selectionSettings={selectionOptions}\n          ,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              type: \"checkbox\",\n              width: \"50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Code\",\n              headerText: \"Repair Code\",\n              textAlign: \"Center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Page, Filter]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DefaultButton, {\n        onClick: renderChart,\n        children: \"Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"MgiderILk+R0bdF+y8S5N1WShgY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/appsk/Documents/Projects/PredictiveMaintenance/React PDM/env/frontend/src/App.js"],"names":["React","Component","useState","Fabric","DefaultButton","XLSX","make_cols","SheetJSFT","GridComponent","ColumnDirective","ColumnsDirective","Page","Inject","Filter","gridObserver","testData","App","preprocessedData","setData","updatepreprocessedDataState","e","eq","equipmentItems","setEq","updateEquipmentItemsState","equipmentLabel","setEquipmentLabel","updateEquipmentLabel","partItems","setPart","updatePartNumberState","partLabels","setPartLabels","updatePartLabels","codeItems","setCode","updateCodeState","codeLabels","setCodeLabels","updateCodeLabels","graphLabel","pdmGraphCoordinates","graphLabels","setLabels","updateLabelState","graphCoordinatesTest","setCoordinates","updateCoordinateState","file","data","cols","groupBy","require","selectionOptions","type","equipmentGrid","equipmentRowSelected","eqLabel","getSelectedRecords","keys","Object","partsList","forEach","item","push","partGrid","partRowSelected","part","name","Set","codesList","code","rcodeGrid","rcodeRowSelected","selectedRcodeLabel","generateCrd","x","y","coordinates","i","length","point","renderChart","xAxisData","yAxisData","graphCoordinates","parts","codes","includes","Date","toDateString","console","log","Chart","ctx","document","getElementById","getContext","myChart","datasets","label","backgroundColor","borderColor","fill","showLine","borderWidth","options","scales","xAxes","distribution","time","unit","displayFormats","quarter","yAxes","ticks","beginAtZero","download","content","fileName","contentType","a","createElement","Blob","href","URL","createObjectURL","click","handleChange","files","target","handleFile","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","raw","strData","JSON","stringify","jsonObject","parse","d","Code","match","isNaN","getMonth","jsonRegroupedTest","jsonRegrouped","equipmentComponentsList","eqStateObject","readAsArrayBuffer","marginTop","margin","pageSize","g"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component, useState } from 'react';\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\nimport { SheetJSFT } from './types';\nimport {GridComponent, ColumnDirective, ColumnsDirective,\n  Page, Inject, Filter, gridObserver} from '@syncfusion/ej2-react-grids';\nimport testData from './json.json';\n \nfunction App() {\n\n  // Preprocessed data state\n  const [preprocessedData, setData] = useState([]);\n  function updatepreprocessedDataState(e) {\n    setData(eq => (preprocessedData, e));\n  }\n\n  // Equipment item state update\n  const [equipmentItems, setEq] = useState([]);\n  function updateEquipmentItemsState(e) {\n    setEq(eq => (equipmentItems, e));\n  }\n\n  const [equipmentLabel, setEquipmentLabel] = useState([]);\n  function updateEquipmentLabel(e) {\n    setEquipmentLabel(eq => (equipmentLabel, e));\n  }\n\n  // Part number state update\n  const [partItems, setPart] = useState([]);\n  function updatePartNumberState(e) {\n    setPart(eq => (partItems, e));\n  }\n\n  const [partLabels, setPartLabels] = useState([]);\n  function updatePartLabels(e) {\n    setPartLabels(eq => (partLabels, e));\n  }\n\n    // Code state update\n    const [codeItems, setCode] = useState([]);\n    function updateCodeState(e) {\n      setCode(eq => (codeItems, e));\n    }\n\n    const [codeLabels, setCodeLabels] = useState([]);\n    function updateCodeLabels(e) {\n      setCodeLabels(eq => (codeLabels, e));\n    }\n\n    // Graph data\n    var graphLabel = [];\n    var pdmGraphCoordinates = [];\n\n    // Graph states\n    const [graphLabels, setLabels] = useState([]);\n    function updateLabelState(e) {\n      setLabels(eq => (graphLabels, e));\n    }\n\n    const [graphCoordinatesTest, setCoordinates] = useState([]);\n    function updateCoordinateState(e) {\n      setCoordinates(eq => (graphCoordinatesTest, e));\n    }\n    \n    // Excel File properties\n     var file = {};\n     var data = [];\n     var cols = [];\n    \n     const groupBy = require('json-groupby');\n\n     const selectionOptions = {\n      type: 'Multiple'\n    };\n\n    // TABLE FORMATING\n  \n    //1. Equipment list Row Selection\n    let equipmentGrid = null;\n    const equipmentRowSelected = () => { \n      if(equipmentGrid){\n        const eqLabel = equipmentGrid.getSelectedRecords()[0][\"Equipment ID\"];\n        updateEquipmentLabel(eqLabel);\n        const keys = Object.keys(preprocessedData[eqLabel]);\n        var partsList = [];\n        keys.forEach(function(item) {\n          partsList.push({\"Part Number\": item});\n        })\n        updatePartNumberState(partsList);\n        updateCodeState([]);\n      }\n    }\n\n    //2. Part Number Row selection\n    let partGrid = null;\n    const partRowSelected = () => {\n      if(partGrid) {\n        const eqLabel = equipmentLabel;\n        const partLabels = partGrid.getSelectedRecords();\n        updatePartLabels(partLabels);\n        var keys = []\n        partLabels.forEach(function(part) {\n        const name = part[\"Part Number\"];\n        keys.push(...Object.keys(preprocessedData[eqLabel][name]));\n        })\n        keys = [...new Set(keys)];\n        var codesList = [];\n        keys.forEach(function(code) {\n          codesList.push({\"Code\": code});\n        })\n        updateCodeState(codesList);\n      }\n    }\n\n    //3. Repair Code Row selection\n    let rcodeGrid = null;\n    const rcodeRowSelected = () => {\n      if(rcodeGrid) {\n        const selectedRcodeLabel = rcodeGrid.getSelectedRecords();\n        updateCodeLabels(selectedRcodeLabel);\n      }\n    }\n\n\n    // Generate graph coordinates\n    function generateCrd(x, y) {\n      const coordinates = [];\n      var i;\n      for(i = 0; i < x.length; i++) {\n        const point = {'x': x[i], 'y':y[i]};\n        coordinates.push(point);\n      }\n      return coordinates;\n    }\n  \n  function renderChart() {\n\n    // Load in Data\n    var xAxisData;\n    var yAxisData;\n    var graphCoordinates = [];\n    var parts = [];\n    partLabels.forEach(function(item) {\n      parts.push(item[\"Part Number\"]);\n    })\n    var codes = []\n    codeLabels.forEach(function(item) {\n      codes.push(item[\"Code\"]);\n    })\n\n    parts.forEach(function(part) {\n      xAxisData = [];\n      yAxisData = [];\n      Object.keys(preprocessedData[equipmentLabel][part]).forEach(function(code){\n        if(codes.includes(code)) {\n          preprocessedData[equipmentLabel][part][code].forEach(function(item){\n            yAxisData.push(item[\"Code\"]);\n            xAxisData.push(new Date(new Date(item[\"Date\"]).toDateString()));\n          })\n        }\n      })\n      graphCoordinates.push(generateCrd(xAxisData, yAxisData));\n      console.log(graphCoordinates);\n    })\n\n    console.log(graphCoordinates);\n    var Chart = require('chart.js');\n    const ctx = document.getElementById('chart').getContext('2d');\n    const myChart = new Chart(ctx, {\n    type: 'scatter',\n    data: {\n        //labels: xAxisData,\n        datasets: [{\n            label: \"Part number: \" + parts[0],\n            data: graphCoordinates[0],\n            backgroundColor: \"#FF4136\",\n            borderColor: \"#FF4136\",\n            fill: false,\n            showLine: true,\n            borderWidth: 1\n        }\n      //   ,\n      //   {\n      //     label: graphLabel[1],\n      //     data: pdmGraphCoordinates[1],\n      //     backgroundColor: \"#0074D9\",\n      //     borderColor: \"#0074D9\",\n      //     fill: false,\n      //     showLine: true,\n      //     borderWidth: 1\n      // }\n    ]\n    },\n    options: {\n        scales: {\n          xAxes: [{\n            type: 'time',\n            distribution: 'series',\n            time: {\n              unit: 'day',\n              displayFormats: {quarter: 'll'}\n            }\n          }],\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n  }\n\n\n  function download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], {type: contentType});\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n}\n \n function handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) file = files[0];\n  };\n \n function handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n \n    reader.onload = (e) => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      data = XLSX.utils.sheet_to_json(ws, {raw: false});\n\n      cols = make_cols(ws['!ref'])\n\n        // Preprocess data\n        const strData = JSON.stringify(data, null, 2)\n        var jsonObject = JSON.parse(strData);\n        var i;\n        for(i = 0; i < jsonObject.length; i++){\n          if (!(\"Part Number\" in jsonObject[i] && \"Code\" in jsonObject[i] && \"Date\" in jsonObject[i])) {\n            delete jsonObject[i];\n          }\n          else {\n            var d = new Date(jsonObject[i][\"Date\"]);\n            if(!jsonObject[i].Code.match(/^\\d+$/)) {\n              delete jsonObject[i];\n            }\n            else if(isNaN(d.getMonth())) {\n              delete jsonObject[i];\n            }\n          }\n        }\n        const jsonRegroupedTest = groupBy(jsonObject, ['Equipment ID', 'Part Number'])\n        const jsonRegrouped = groupBy(jsonObject, ['Equipment ID', 'Part Number', 'Code'])\n        const equipmentComponentsList = Object.keys(jsonRegrouped);\n        var eqStateObject = [];\n        equipmentComponentsList.forEach(function(item) {\n          eqStateObject.push({\"Equipment ID\": item});\n        })\n\n        //Update states\n        updateEquipmentItemsState(eqStateObject);\n        updatepreprocessedDataState(jsonRegrouped);\n        console.log(jsonRegrouped);\n        \n\n        // Random data selection\n      //   for(i = 0; i < 2; i++) {\n      //     yAxisData = [];\n      //     xAxisData = [];\n      //   var keys = Object.keys(jsonRegroupedTest)\n      //   var randIndex = Math.floor(Math.random() * keys.length)\n      //   var randKey = keys[randIndex]\n      //   const randomGroup = jsonRegroupedTest[randKey]\n      //   var label = randKey + \" => \";\n      //   keys = Object.keys(randomGroup)\n      //   randIndex = Math.floor(Math.random() * keys.length)\n      //   randKey = keys[randIndex]\n      //   const randomGroup2 = randomGroup[randKey];\n      //   label += randKey;\n      //   graphLabel.push(label);\n        \n      //   randomGroup2.forEach(function(item) {\n      //     yAxisData.push(item[\"Code\"]);\n      //     xAxisData.push(item[\"Date\"]);\n      //   })\n        \n      //   pdmGraphCoordinates.push(generateCrd(xAxisData, yAxisData));\n      // }\n      // End of random data selection\n\n\n\n     //   renderChart();\n\n    };\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    };\n  }\n\n \n    return (\n      <div>\n        <label htmlFor=\"file\">Upload your Excel File</label>\n        <br />\n        <input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={handleChange} />\n        <br />\n        <input type='submit' \n          value=\"Update\"\n          onClick={handleFile} />\n        \n        <div id=\"parent\">\n          <div id=\"EqID\" style={{ marginTop: '20%', margin:'10%'}}>\n            <GridComponent dataSource={equipmentItems}  \n              allowPaging={true}\n              pageSettings={{pageSize:10}}\n              allowFiltering={true}\n              rowSelected={equipmentRowSelected}\n              ref={g => equipmentGrid = g}\n              >\n              <ColumnsDirective>\n            <ColumnDirective field='Equipment ID' headerText='Equipment List' textAlign='Center'/>\n            </ColumnsDirective>\n            <Inject services={[Page, Filter]}/>\n            </GridComponent>\n          </div>\n\n          <div id=\"PID\" style={{ marginTop: '20%', margin:'10%'}}>\n          <GridComponent dataSource={partItems}\n          allowPaging={true}\n          pageSettings={{pageSize:10}}\n          allowFiltering={true}\n          rowSelected={partRowSelected}\n          rowDeselected={partRowSelected}\n          ref={g => partGrid = g}\n          //selectionSettings={selectionOptions}\n          >\n            <ColumnsDirective>\n            <ColumnDirective type='checkbox' width='50'/>\n          <ColumnDirective field='Part Number' headerText='Part Number' textAlign='Center'/>\n          </ColumnsDirective>\n          <Inject services={[Page, Filter]}/>\n          </GridComponent>\n          </div> \n\n          <div id=\"RC\" style={{ marginTop: '20%', margin:'10%'}}>\n          <GridComponent dataSource={codeItems}\n          allowPaging={true}\n          pageSettings={{pageSize:10}}\n          allowFiltering={true}\n          rowSelected={rcodeRowSelected}\n          ref={g => rcodeGrid = g}\n          //selectionSettings={selectionOptions}\n          >\n            <ColumnsDirective>\n            <ColumnDirective type='checkbox' width='50'/>\n          <ColumnDirective field='Code' headerText='Repair Code' textAlign='Center'/>\n          </ColumnsDirective>\n          <Inject services={[Page, Filter]}/>\n          </GridComponent>\n          </div>\n\n          <DefaultButton onClick={renderChart}>Graph</DefaultButton>\n\n        </div>\n\n          <canvas id=\"chart\"></canvas>\n      </div>       \n\n    )\n  }\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}