{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\appsk\\\\Documents\\\\Projects\\\\PredictiveMaintenance\\\\React PDM\\\\env\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { Component, useState } from 'react';\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\nimport { SheetJSFT } from './types';\nimport { GridComponent, ColumnDirective, ColumnsDirective, Page, Inject, Filter, gridObserver } from '@syncfusion/ej2-react-grids';\nimport { endOfToday, format, set } from 'date-fns';\nimport testData from './json.json';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport { Grid } from '@material-ui/core';\n\nfunction App() {\n  _s();\n\n  // Preprocessed data state\n  const [preprocessedData, setData] = useState([]);\n\n  function updatepreprocessedDataState(e) {\n    setData(eq => (preprocessedData, e));\n  } // Equipment item state update\n\n\n  const [equipmentItems, setEq] = useState([]);\n\n  function updateEquipmentItemsState(e) {\n    setEq(eq => (equipmentItems, e));\n  }\n\n  const [equipmentLabel, setEquipmentLabel] = useState([]);\n\n  function updateEquipmentLabel(e) {\n    setEquipmentLabel(eq => (equipmentLabel, e));\n  } // Part number state update\n\n\n  const [partItems, setPart] = useState([]);\n\n  function updatePartNumberState(e) {\n    setPart(eq => (partItems, e));\n  }\n\n  const [partLabels, setPartLabels] = useState([]);\n\n  function updatePartLabels(e) {\n    setPartLabels(eq => (partLabels, e));\n  } // Code state update\n\n\n  const [codeItems, setCode] = useState([]);\n\n  function updateCodeState(e) {\n    setCode(eq => (codeItems, e));\n  }\n\n  const [codeLabels, setCodeLabels] = useState([]);\n\n  function updateCodeLabels(e) {\n    setCodeLabels(eq => (codeLabels, e));\n  } // Graph data\n\n\n  var graphLabel = [];\n  var pdmGraphCoordinates = []; // // Graph states\n  // const [graphLabels, setLabels] = useState([]);\n  // function updateLabelState(e) {\n  //   setLabels(eq => (graphLabels, e));\n  // }\n  // const [graphCoordinatesTest, setCoordinates] = useState([]);\n  // function updateCoordinateState(e) {\n  //   setCoordinates(eq => (graphCoordinatesTest, e));\n  // }\n  // Slider states\n\n  const [sliderRange, setSliderRange] = useState([new Date(2017, 1, 1), new Date(2020, 1, 1)]);\n\n  function updateSliderRange(e, data) {\n    setSliderRange(data);\n  }\n\n  const [minDate, setMinDate] = React.useState(new Date(2017, 1, 1));\n\n  const handleMinDate = date => {\n    setMinDate(date);\n  }; // Excel File properties\n\n\n  var file = {};\n  var data = [];\n  var cols = [];\n\n  const groupBy = require('json-groupby');\n\n  const selectionOptions = {\n    type: 'Multiple'\n  }; // TABLE FORMATING\n  //1. Equipment list Row Selection\n\n  let equipmentGrid = null;\n\n  const equipmentRowSelected = () => {\n    if (equipmentGrid) {\n      const eqLabel = equipmentGrid.getSelectedRecords()[0][\"Equipment ID\"];\n      updateEquipmentLabel(eqLabel);\n      const keys = Object.keys(preprocessedData[eqLabel]);\n      var partsList = [];\n      keys.forEach(function (item) {\n        partsList.push({\n          \"Part Number\": item\n        });\n      });\n      updatePartNumberState(partsList);\n      updateCodeState([]);\n    }\n  }; //2. Part Number Row selection\n\n\n  let partGrid = null;\n\n  const partRowSelected = () => {\n    if (partGrid && partGrid.getSelectedRecords().length <= 3) {\n      const eqLabel = equipmentLabel;\n      const partLabels = partGrid.getSelectedRecords();\n      updatePartLabels(partLabels);\n      var keys = [];\n      partLabels.forEach(function (part) {\n        const name = part[\"Part Number\"];\n        keys.push(...Object.keys(preprocessedData[eqLabel][name]));\n      });\n      keys = [...new Set(keys)];\n      var codesList = [];\n      keys.forEach(function (code) {\n        codesList.push({\n          \"Code\": code\n        });\n      });\n      updateCodeState(codesList);\n    } else if (partGrid) {\n      partGrid.clearSelection();\n      updatePartLabels([]);\n      alert(\"Only 3 Part selections are availavle. Please select your Parts again.\");\n    }\n  }; //3. Repair Code Row selection\n\n\n  let rcodeGrid = null;\n\n  const rcodeRowSelected = () => {\n    if (rcodeGrid) {\n      const selectedRcodeLabel = rcodeGrid.getSelectedRecords();\n      updateCodeLabels(selectedRcodeLabel); ////////\n      // var parts = [];\n      // var minDate = null;\n      // var maxDate = null;\n      // partLabels.forEach(function(item) {\n      //   parts.push(item[\"Part Number\"]);\n      // })\n      // var codes = []\n      // selectedRcodeLabel.forEach(function(item) {\n      //   codes.push(item[\"Code\"]);\n      // })\n      // parts.forEach(function(part) {\n      //   Object.keys(preprocessedData[equipmentLabel][part]).forEach(function(code){\n      //     if(codes.includes(code)) {\n      //       preprocessedData[equipmentLabel][part][code].forEach(function(item){\n      //         const newDate = new Date(new Date(item[\"Date\"]).toDateString());\n      //         if(minDate === null) {\n      //           minDate = newDate;\n      //         }\n      //         else if(+minDate > +newDate) {\n      //           minDate = newDate;\n      //         }\n      //         if(maxDate === null) {\n      //           maxDate = newDate;\n      //         }\n      //         else if(+maxDate < +newDate) {\n      //           maxDate = newDate;\n      //         }\n      //       })\n      //     }\n      //   })\n      // })\n      // updateSliderRange([minDate, maxDate]);\n      /////////////\n    }\n  }; // Generate graph coordinates\n\n\n  function generateCrd(x, y) {\n    const coordinates = [];\n    var i;\n\n    for (i = 0; i < x.length; i++) {\n      const point = {\n        'x': x[i],\n        'y': y[i]\n      };\n      coordinates.push(point);\n    }\n\n    return coordinates;\n  }\n\n  function renderChart() {\n    // Load in Data\n    var xAxisData;\n    var yAxisData;\n    var graphCoordinates = [];\n    var parts = [];\n    partLabels.forEach(function (item) {\n      parts.push(item[\"Part Number\"]);\n    });\n    var codes = [];\n    codeLabels.forEach(function (item) {\n      codes.push(item[\"Code\"]);\n    });\n    parts.forEach(function (part) {\n      xAxisData = [];\n      yAxisData = [];\n      Object.keys(preprocessedData[equipmentLabel][part]).forEach(function (code) {\n        if (codes.includes(code)) {\n          preprocessedData[equipmentLabel][part][code].forEach(function (item) {\n            yAxisData.push(item[\"Code\"]);\n            xAxisData.push(new Date(new Date(item[\"Date\"]).toDateString()));\n          });\n        }\n      });\n      graphCoordinates.push(generateCrd(xAxisData, yAxisData));\n    });\n    var codesUsed = [];\n\n    var Chart = require('chart.js');\n\n    const ctx = document.getElementById('chart').getContext('2d');\n    const myChart = new Chart(ctx, {\n      type: 'scatter',\n      data: {\n        datasets: [{\n          label: \"Part number: \" + parts[0],\n          data: graphCoordinates[0],\n          backgroundColor: \"#FF4136\",\n          borderColor: \"#FF4136\",\n          fill: false,\n          showLine: false,\n          borderWidth: 1\n        }, {\n          label: \"Part number: \" + parts[1],\n          data: graphCoordinates[1],\n          backgroundColor: \"#0074D9\",\n          borderColor: \"#0074D9\",\n          fill: false,\n          showLine: false,\n          borderWidth: 1\n        }, {\n          label: \"Part number: \" + parts[2],\n          data: graphCoordinates[2],\n          backgroundColor: \"#228B22\",\n          borderColor: \"#228B22\",\n          fill: false,\n          showLine: false,\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            type: 'time',\n            //distribution: 'series',\n            time: {\n              unit: 'month' //displayFormats: {quarter: 'll'}\n\n            },\n            ticks: {//max: testDate\n            }\n          }],\n          yAxes: [{\n            gridLines: false,\n            ticks: {\n              min: 0,\n              autoSkip: false,\n              stepSize: 1,\n              callback: function (label, index, labels) {\n                var result = false;\n\n                if (graphCoordinates[0]) {\n                  graphCoordinates[0].forEach(function (item) {\n                    if (item['y'] == label && !codesUsed.includes(label)) {\n                      result = true;\n                      codesUsed.push(label);\n                    }\n                  });\n                }\n\n                if (result) {\n                  return label;\n                }\n\n                if (graphCoordinates[1]) {\n                  graphCoordinates[1].forEach(function (item) {\n                    if (item['y'] == label && !codesUsed.includes(label)) {\n                      result = true;\n                      codesUsed.push(label);\n                    }\n                  });\n                }\n\n                if (result) {\n                  return label;\n                }\n\n                if (graphCoordinates[2]) {\n                  graphCoordinates[2].forEach(function (item) {\n                    if (item['y'] == label && !codesUsed.includes(label)) {\n                      result = true;\n                      codesUsed.push(label);\n                    }\n                  });\n                }\n\n                if (result) {\n                  return label;\n                }\n              }\n            }\n          }]\n        }\n      }\n    });\n  } //   function download(content, fileName, contentType) {\n  //     var a = document.createElement(\"a\");\n  //     var file = new Blob([content], {type: contentType});\n  //     a.href = URL.createObjectURL(file);\n  //     a.download = fileName;\n  //     a.click();\n  // }\n\n\n  function handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) file = files[0];\n  }\n\n  ;\n\n  function handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      data = XLSX.utils.sheet_to_json(ws, {\n        raw: false\n      });\n      cols = make_cols(ws['!ref']); // Preprocess data\n\n      const strData = JSON.stringify(data, null, 2);\n      var jsonObject = JSON.parse(strData);\n      var i;\n\n      for (i = 0; i < jsonObject.length; i++) {\n        if (!(\"Part Number\" in jsonObject[i] && \"Code\" in jsonObject[i] && \"Date\" in jsonObject[i])) {\n          delete jsonObject[i];\n        } else {\n          var d = new Date(jsonObject[i][\"Date\"]);\n\n          if (!jsonObject[i].Code.match(/^\\d+$/)) {\n            delete jsonObject[i];\n          } else if (isNaN(d.getMonth())) {\n            delete jsonObject[i];\n          }\n        }\n      }\n\n      const jsonRegroupedTest = groupBy(jsonObject, ['Equipment ID', 'Part Number']);\n      const jsonRegrouped = groupBy(jsonObject, ['Equipment ID', 'Part Number', 'Code']);\n      const equipmentComponentsList = Object.keys(jsonRegrouped);\n      var eqStateObject = [];\n      equipmentComponentsList.forEach(function (item) {\n        eqStateObject.push({\n          \"Equipment ID\": item\n        });\n      }); //Update states\n\n      updateEquipmentItemsState(eqStateObject);\n      updatepreprocessedDataState(jsonRegrouped);\n      console.log(jsonRegrouped); // Random data selection\n      //   for(i = 0; i < 2; i++) {\n      //     yAxisData = [];\n      //     xAxisData = [];\n      //   var keys = Object.keys(jsonRegroupedTest)\n      //   var randIndex = Math.floor(Math.random() * keys.length)\n      //   var randKey = keys[randIndex]\n      //   const randomGroup = jsonRegroupedTest[randKey]\n      //   var label = randKey + \" => \";\n      //   keys = Object.keys(randomGroup)\n      //   randIndex = Math.floor(Math.random() * keys.length)\n      //   randKey = keys[randIndex]\n      //   const randomGroup2 = randomGroup[randKey];\n      //   label += randKey;\n      //   graphLabel.push(label);\n      //   randomGroup2.forEach(function(item) {\n      //     yAxisData.push(item[\"Code\"]);\n      //     xAxisData.push(item[\"Date\"]);\n      //   })\n      //   pdmGraphCoordinates.push(generateCrd(xAxisData, yAxisData));\n      // }\n      // End of random data selection\n      //   renderChart();\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n\n    ;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file\",\n      children: \"Upload your Excel File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      id: \"file\",\n      accept: SheetJSFT,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Update\",\n      onClick: handleFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"EqID\",\n        style: {\n          marginTop: '20%',\n          margin: '10%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GridComponent, {\n          dataSource: equipmentItems,\n          allowPaging: true,\n          pageSettings: {\n            pageSize: 10\n          },\n          allowFiltering: true,\n          rowSelected: equipmentRowSelected,\n          ref: g => equipmentGrid = g,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Equipment ID\",\n              headerText: \"Equipment List\",\n              textAlign: \"Center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Page, Filter]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"PID\",\n        style: {\n          marginTop: '20%',\n          margin: '10%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GridComponent, {\n          dataSource: partItems,\n          allowPaging: true,\n          pageSettings: {\n            pageSize: 10\n          },\n          allowFiltering: true,\n          rowSelected: partRowSelected,\n          rowDeselected: partRowSelected,\n          ref: g => partGrid = g //selectionSettings={selectionOptions}\n          ,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              type: \"checkbox\",\n              width: \"50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Part Number\",\n              headerText: \"Part Number\",\n              textAlign: \"Center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Page, Filter]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"RC\",\n        style: {\n          marginTop: '20%',\n          margin: '10%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GridComponent, {\n          dataSource: codeItems,\n          allowPaging: true,\n          pageSettings: {\n            pageSize: 10\n          },\n          allowFiltering: true,\n          rowSelected: rcodeRowSelected,\n          ref: g => rcodeGrid = g //selectionSettings={selectionOptions}\n          ,\n          children: [/*#__PURE__*/_jsxDEV(ColumnsDirective, {\n            children: [/*#__PURE__*/_jsxDEV(ColumnDirective, {\n              type: \"checkbox\",\n              width: \"50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(ColumnDirective, {\n              field: \"Code\",\n              headerText: \"Repair Code\",\n              textAlign: \"Center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Inject, {\n            services: [Page, Filter]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"graphButton\",\n        children: [/*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-around\",\n            children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker //disableToolbar\n            , {\n              variant: \"dialog\",\n              format: \"MM/dd/yyy\",\n              margin: \"normal\",\n              id: \"min-date\",\n              label: \"Staring Date\",\n              value: minDate,\n              onChange: handleMinDate,\n              KeyboardButtonProps: {\n                'arial-label': 'change date'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DefaultButton, {\n          onClick: renderChart,\n          children: \"Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"FnRYPTvwcABDwL6H83LzPUSFehs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/appsk/Documents/Projects/PredictiveMaintenance/React PDM/env/frontend/src/App.js"],"names":["React","Component","useState","Fabric","DefaultButton","XLSX","make_cols","SheetJSFT","GridComponent","ColumnDirective","ColumnsDirective","Page","Inject","Filter","gridObserver","endOfToday","format","set","testData","DateFnsUtils","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","Grid","App","preprocessedData","setData","updatepreprocessedDataState","e","eq","equipmentItems","setEq","updateEquipmentItemsState","equipmentLabel","setEquipmentLabel","updateEquipmentLabel","partItems","setPart","updatePartNumberState","partLabels","setPartLabels","updatePartLabels","codeItems","setCode","updateCodeState","codeLabels","setCodeLabels","updateCodeLabels","graphLabel","pdmGraphCoordinates","sliderRange","setSliderRange","Date","updateSliderRange","data","minDate","setMinDate","handleMinDate","date","file","cols","groupBy","require","selectionOptions","type","equipmentGrid","equipmentRowSelected","eqLabel","getSelectedRecords","keys","Object","partsList","forEach","item","push","partGrid","partRowSelected","length","part","name","Set","codesList","code","clearSelection","alert","rcodeGrid","rcodeRowSelected","selectedRcodeLabel","generateCrd","x","y","coordinates","i","point","renderChart","xAxisData","yAxisData","graphCoordinates","parts","codes","includes","toDateString","codesUsed","Chart","ctx","document","getElementById","getContext","myChart","datasets","label","backgroundColor","borderColor","fill","showLine","borderWidth","options","scales","xAxes","time","unit","ticks","yAxes","gridLines","min","autoSkip","stepSize","callback","index","labels","result","handleChange","files","target","handleFile","reader","FileReader","rABS","readAsBinaryString","onload","bstr","wb","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","raw","strData","JSON","stringify","jsonObject","parse","d","Code","match","isNaN","getMonth","jsonRegroupedTest","jsonRegrouped","equipmentComponentsList","eqStateObject","console","log","readAsArrayBuffer","marginTop","margin","pageSize","g"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component, useState } from 'react';\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\nimport { SheetJSFT } from './types';\nimport {GridComponent, ColumnDirective, ColumnsDirective,\n  Page, Inject, Filter, gridObserver} from '@syncfusion/ej2-react-grids';\nimport { endOfToday, format, set } from 'date-fns' \nimport testData from './json.json';\nimport DateFnsUtils from '@date-io/date-fns'\nimport {MuiPickersUtilsProvider,\nKeyboardTimePicker,\nKeyboardDatePicker} from '@material-ui/pickers'\nimport { Grid } from '@material-ui/core';\n\n \nfunction App() {\n\n  // Preprocessed data state\n  const [preprocessedData, setData] = useState([]);\n  function updatepreprocessedDataState(e) {\n    setData(eq => (preprocessedData, e));\n  }\n\n  // Equipment item state update\n  const [equipmentItems, setEq] = useState([]);\n  function updateEquipmentItemsState(e) {\n    setEq(eq => (equipmentItems, e));\n  }\n\n  const [equipmentLabel, setEquipmentLabel] = useState([]);\n  function updateEquipmentLabel(e) {\n    setEquipmentLabel(eq => (equipmentLabel, e));\n  }\n\n  // Part number state update\n  const [partItems, setPart] = useState([]);\n  function updatePartNumberState(e) {\n    setPart(eq => (partItems, e));\n  }\n\n  const [partLabels, setPartLabels] = useState([]);\n  function updatePartLabels(e) {\n    setPartLabels(eq => (partLabels, e));\n  }\n\n    // Code state update\n    const [codeItems, setCode] = useState([]);\n    function updateCodeState(e) {\n      setCode(eq => (codeItems, e));\n    }\n\n    const [codeLabels, setCodeLabels] = useState([]);\n    function updateCodeLabels(e) {\n      setCodeLabels(eq => (codeLabels, e));\n    }\n\n    // Graph data\n    var graphLabel = [];\n    var pdmGraphCoordinates = [];\n\n    // // Graph states\n    // const [graphLabels, setLabels] = useState([]);\n    // function updateLabelState(e) {\n    //   setLabels(eq => (graphLabels, e));\n    // }\n\n    // const [graphCoordinatesTest, setCoordinates] = useState([]);\n    // function updateCoordinateState(e) {\n    //   setCoordinates(eq => (graphCoordinatesTest, e));\n    // }\n\n    // Slider states\n    const [sliderRange, setSliderRange] = useState([new Date(2017,1,1), new Date(2020,1,1)])\n    function updateSliderRange(e, data) {\n      setSliderRange(data);\n    }\n\n    const [minDate, setMinDate] = React.useState(new Date(2017,1,1))\n    const handleMinDate = (date) => {\n      setMinDate(date)\n    }\n    \n    // Excel File properties\n     var file = {};\n     var data = [];\n     var cols = [];\n    \n     const groupBy = require('json-groupby');\n\n     const selectionOptions = {\n      type: 'Multiple'\n    };\n\n    // TABLE FORMATING\n  \n    //1. Equipment list Row Selection\n    let equipmentGrid = null;\n    const equipmentRowSelected = () => { \n      if(equipmentGrid){\n        const eqLabel = equipmentGrid.getSelectedRecords()[0][\"Equipment ID\"];\n        updateEquipmentLabel(eqLabel);\n        const keys = Object.keys(preprocessedData[eqLabel]);\n        var partsList = [];\n        keys.forEach(function(item) {\n          partsList.push({\"Part Number\": item});\n        })\n        updatePartNumberState(partsList);\n        updateCodeState([]);\n      }\n    }\n\n    //2. Part Number Row selection\n    let partGrid = null;\n    const partRowSelected = () => {\n      if(partGrid && partGrid.getSelectedRecords().length <= 3) {\n        const eqLabel = equipmentLabel;\n        const partLabels = partGrid.getSelectedRecords();\n        updatePartLabels(partLabels);\n        var keys = []\n        partLabels.forEach(function(part) {\n        const name = part[\"Part Number\"];\n        keys.push(...Object.keys(preprocessedData[eqLabel][name]));\n        })\n        keys = [...new Set(keys)];\n        var codesList = [];\n        keys.forEach(function(code) {\n          codesList.push({\"Code\": code});\n        })\n        updateCodeState(codesList);\n      }\n      else if(partGrid) {\n        partGrid.clearSelection()\n        updatePartLabels([])\n        alert(\"Only 3 Part selections are availavle. Please select your Parts again.\")\n      }\n    }\n\n    //3. Repair Code Row selection\n    let rcodeGrid = null;\n    const rcodeRowSelected = () => {\n      if(rcodeGrid) {\n        const selectedRcodeLabel = rcodeGrid.getSelectedRecords();\n        updateCodeLabels(selectedRcodeLabel);\n        \n        ////////\n      // var parts = [];\n      // var minDate = null;\n      // var maxDate = null;\n      // partLabels.forEach(function(item) {\n      //   parts.push(item[\"Part Number\"]);\n      // })\n      // var codes = []\n      // selectedRcodeLabel.forEach(function(item) {\n      //   codes.push(item[\"Code\"]);\n      // })\n\n      // parts.forEach(function(part) {\n      //   Object.keys(preprocessedData[equipmentLabel][part]).forEach(function(code){\n      //     if(codes.includes(code)) {\n      //       preprocessedData[equipmentLabel][part][code].forEach(function(item){\n      //         const newDate = new Date(new Date(item[\"Date\"]).toDateString());\n      //         if(minDate === null) {\n      //           minDate = newDate;\n      //         }\n      //         else if(+minDate > +newDate) {\n      //           minDate = newDate;\n      //         }\n      //         if(maxDate === null) {\n      //           maxDate = newDate;\n      //         }\n      //         else if(+maxDate < +newDate) {\n      //           maxDate = newDate;\n      //         }\n      //       })\n      //     }\n      //   })\n      // })\n      // updateSliderRange([minDate, maxDate]);\n      /////////////\n      }\n    }\n\n\n    // Generate graph coordinates\n    function generateCrd(x, y) {\n      const coordinates = [];\n      var i;\n      for(i = 0; i < x.length; i++) {\n        const point = {'x': x[i], 'y':y[i]};\n        coordinates.push(point);\n      }\n      return coordinates;\n    }\n  \n  function renderChart() {\n\n    // Load in Data\n    var xAxisData;\n    var yAxisData;\n    var graphCoordinates = [];\n    var parts = [];\n    partLabels.forEach(function(item) {\n      parts.push(item[\"Part Number\"]);\n    })\n    var codes = []\n    codeLabels.forEach(function(item) {\n      codes.push(item[\"Code\"]);\n    })\n\n    parts.forEach(function(part) {\n      xAxisData = [];\n      yAxisData = [];\n      Object.keys(preprocessedData[equipmentLabel][part]).forEach(function(code){\n        if(codes.includes(code)) {\n          preprocessedData[equipmentLabel][part][code].forEach(function(item){\n            yAxisData.push(item[\"Code\"]);\n            xAxisData.push(new Date(new Date(item[\"Date\"]).toDateString()));\n          })\n        }\n      })\n      graphCoordinates.push(generateCrd(xAxisData, yAxisData));\n    })\n\n    var codesUsed = []\n\n    var Chart = require('chart.js');\n    const ctx = document.getElementById('chart').getContext('2d');\n    const myChart = new Chart(ctx, {\n    type: 'scatter',\n    data: {\n        datasets: [{\n            label: \"Part number: \" + parts[0],\n            data: graphCoordinates[0],\n            backgroundColor: \"#FF4136\",\n            borderColor: \"#FF4136\",\n            fill: false,\n            showLine: false,\n            borderWidth: 1\n        }\n        ,\n        {\n          label: \"Part number: \" + parts[1],\n          data: graphCoordinates[1],\n          backgroundColor: \"#0074D9\",\n          borderColor: \"#0074D9\",\n          fill: false,\n          showLine: false,\n          borderWidth: 1\n      },\n      {\n        label: \"Part number: \" + parts[2],\n        data: graphCoordinates[2],\n        backgroundColor: \"#228B22\",\n        borderColor: \"#228B22\",\n        fill: false,\n        showLine: false,\n        borderWidth: 1\n    }\n    ]\n    },\n    options: {\n        scales: {\n          xAxes: [{\n            type: 'time',\n            //distribution: 'series',\n            time: {\n              unit: 'month',\n              //displayFormats: {quarter: 'll'}\n            },\n            ticks: {\n              //max: testDate\n            }\n          }],\n            yAxes: [{\n                gridLines: false,\n                ticks: {\n                  min: 0,\n                  autoSkip: false,\n                  stepSize:1,\n                  callback: function(label, index, labels) {\n                    var result = false;\n                    if(graphCoordinates[0]){\n                    graphCoordinates[0].forEach(function(item){\n                      if(item['y'] == label && !codesUsed.includes(label)) {\n                        result = true; \n                        codesUsed.push(label)}\n                    })}\n                    if (result) {\n                      return label\n                    }\n                    if(graphCoordinates[1]){\n                    graphCoordinates[1].forEach(function(item){\n                      if(item['y'] == label && !codesUsed.includes(label)) {\n                        result = true; \n                        codesUsed.push(label)}\n                    })}\n                    if (result) {\n                      return label\n                    }\n                    if(graphCoordinates[2]){\n                    graphCoordinates[2].forEach(function(item){\n                      if(item['y'] == label && !codesUsed.includes(label)) {\n                        result = true; \n                        codesUsed.push(label)}\n                    })}\n                    if (result) {\n                      return label\n                    }\n                  }\n                }\n            }]\n        }\n    }\n});\n  }\n\n\n//   function download(content, fileName, contentType) {\n//     var a = document.createElement(\"a\");\n//     var file = new Blob([content], {type: contentType});\n//     a.href = URL.createObjectURL(file);\n//     a.download = fileName;\n//     a.click();\n// }\n \n function handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) file = files[0];\n  };\n \n function handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n \n    reader.onload = (e) => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      data = XLSX.utils.sheet_to_json(ws, {raw: false});\n\n      cols = make_cols(ws['!ref'])\n\n        // Preprocess data\n        const strData = JSON.stringify(data, null, 2)\n        var jsonObject = JSON.parse(strData);\n        var i;\n        for(i = 0; i < jsonObject.length; i++){\n          if (!(\"Part Number\" in jsonObject[i] && \"Code\" in jsonObject[i] && \"Date\" in jsonObject[i])) {\n            delete jsonObject[i];\n          }\n          else {\n            var d = new Date(jsonObject[i][\"Date\"]);\n            if(!jsonObject[i].Code.match(/^\\d+$/)) {\n              delete jsonObject[i];\n            }\n            else if(isNaN(d.getMonth())) {\n              delete jsonObject[i];\n            }\n          }\n        }\n        const jsonRegroupedTest = groupBy(jsonObject, ['Equipment ID', 'Part Number'])\n        const jsonRegrouped = groupBy(jsonObject, ['Equipment ID', 'Part Number', 'Code'])\n        const equipmentComponentsList = Object.keys(jsonRegrouped);\n        var eqStateObject = [];\n        equipmentComponentsList.forEach(function(item) {\n          eqStateObject.push({\"Equipment ID\": item});\n        })\n\n        //Update states\n        updateEquipmentItemsState(eqStateObject);\n        updatepreprocessedDataState(jsonRegrouped);\n        console.log(jsonRegrouped);\n        \n\n        // Random data selection\n      //   for(i = 0; i < 2; i++) {\n      //     yAxisData = [];\n      //     xAxisData = [];\n      //   var keys = Object.keys(jsonRegroupedTest)\n      //   var randIndex = Math.floor(Math.random() * keys.length)\n      //   var randKey = keys[randIndex]\n      //   const randomGroup = jsonRegroupedTest[randKey]\n      //   var label = randKey + \" => \";\n      //   keys = Object.keys(randomGroup)\n      //   randIndex = Math.floor(Math.random() * keys.length)\n      //   randKey = keys[randIndex]\n      //   const randomGroup2 = randomGroup[randKey];\n      //   label += randKey;\n      //   graphLabel.push(label);\n        \n      //   randomGroup2.forEach(function(item) {\n      //     yAxisData.push(item[\"Code\"]);\n      //     xAxisData.push(item[\"Date\"]);\n      //   })\n        \n      //   pdmGraphCoordinates.push(generateCrd(xAxisData, yAxisData));\n      // }\n      // End of random data selection\n\n\n\n     //   renderChart();\n\n    };\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    };\n  }\n\n \n    return (\n      <div>\n        <label htmlFor=\"file\">Upload your Excel File</label>\n        <br />\n        <input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={handleChange} />\n        <br />\n        <input type='submit' \n          value=\"Update\"\n          onClick={handleFile} />\n        \n        <div id=\"parent\">\n          <div id=\"EqID\" style={{ marginTop: '20%', margin:'10%'}}>\n            <GridComponent dataSource={equipmentItems}  \n              allowPaging={true}\n              pageSettings={{pageSize:10}}\n              allowFiltering={true}\n              rowSelected={equipmentRowSelected}\n              ref={g => equipmentGrid = g}\n              >\n              <ColumnsDirective>\n            <ColumnDirective field='Equipment ID' headerText='Equipment List' textAlign='Center'/>\n            </ColumnsDirective>\n            <Inject services={[Page, Filter]}/>\n            </GridComponent>\n          </div>\n\n          <div id=\"PID\" style={{ marginTop: '20%', margin:'10%'}}>\n          <GridComponent dataSource={partItems}\n          allowPaging={true}\n          pageSettings={{pageSize:10}}\n          allowFiltering={true}\n          rowSelected={partRowSelected}\n          rowDeselected={partRowSelected}\n          ref={g => partGrid = g}\n          //selectionSettings={selectionOptions}\n          >\n            <ColumnsDirective>\n            <ColumnDirective type='checkbox' width='50'/>\n          <ColumnDirective field='Part Number' headerText='Part Number' textAlign='Center'/>\n          </ColumnsDirective>\n          <Inject services={[Page, Filter]}/>\n          </GridComponent>\n          </div> \n\n          <div id=\"RC\" style={{ marginTop: '20%', margin:'10%'}}>\n          <GridComponent dataSource={codeItems}\n          allowPaging={true}\n          pageSettings={{pageSize:10}}\n          allowFiltering={true}\n          rowSelected={rcodeRowSelected}\n          ref={g => rcodeGrid = g}\n          //selectionSettings={selectionOptions}\n          >\n            <ColumnsDirective>\n            <ColumnDirective type='checkbox' width='50'/>\n          <ColumnDirective field='Code' headerText='Repair Code' textAlign='Center'/>\n          </ColumnsDirective>\n          <Inject services={[Page, Filter]}/>\n          </GridComponent>\n          </div>\n\n          <div id='graphButton'>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <Grid container justify='space-around'>\n                <KeyboardDatePicker\n                  //disableToolbar\n                  variant='dialog'\n                  format='MM/dd/yyy'\n                  margin='normal'\n                  id='min-date'\n                  label='Staring Date'\n                  value={minDate}\n                  onChange={handleMinDate}\n                  KeyboardButtonProps={{'arial-label': 'change date'}}\n                />\n              </Grid>\n            </MuiPickersUtilsProvider>\n            <DefaultButton  onClick={renderChart}>Graph</DefaultButton>\n          </div>\n        </div>\n\n          <canvas id=\"chart\"></canvas>\n      </div>       \n\n    )\n  }\n\n \nexport default App;"]},"metadata":{},"sourceType":"module"}