{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\appsk\\\\Documents\\\\Projects\\\\PredictiveMaintenance\\\\React PDM\\\\env\\\\frontend\\\\src\\\\App.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onFileChange = fileList => {\n      console.log(\"fileList\", fileList);\n      let fileObj = fileList;\n\n      if (!fileObj) {\n        this.setState({\n          errorMessage: \"No file uploaded!\"\n        });\n        return false;\n      }\n\n      console.log(\"fileObj.type:\", fileObj.type);\n\n      if (!(fileObj.type === \"application/vnd.ms-excel\" || fileObj.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")) {\n        this.setState({\n          errorMessage: \"Unknown file format. Only Excel files are uploaded!\"\n        });\n        return false;\n      } //just pass the fileObj as parameter\n\n\n      ExcelRenderer(fileObj, (err, resp) => {\n        if (err) {\n          console.log(err);\n        } else {\n          let newRows = [];\n          resp.rows.slice(1).map((row, index) => {\n            if (row && row !== \"undefined\") {\n              newRows.push({\n                key: index,\n                name: row[0],\n                age: row[1],\n                gender: row[2]\n              });\n            }\n          });\n\n          if (newRows.length === 0) {\n            this.setState({\n              errorMessage: \"No data found in file!\"\n            });\n            return false;\n          } else {\n            this.setState({\n              cols: resp.cols,\n              rows: newRows,\n              errorMessage: null\n            });\n          }\n        }\n      });\n      return false;\n    };\n\n    this.onFileUpload = async () => {\n      console.log(\"submitting: \", this.state.rows); //submit to API\n      //if successful, banigate and clear the data\n      //this.setState({ rows: [] })\n    };\n\n    this.state = {\n      // Initially, no file is selected \n      selectedFile: null\n    };\n\n    this.fileData = () => {\n      if (this.state.selectedFile) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"File Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Name: \", this.state.selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Type: \", this.state.selectedFile.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Last Modified:\", \" \", this.state.selectedFile.lastModifiedDate.toDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Choose before Pressing the Upload button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this);\n      }\n    };\n  }\n\n  checkFile(file) {\n    let errorMessage = \"\";\n\n    if (!file || !file[0]) {\n      return;\n    }\n\n    const isExcel = file[0].type === \"application/vnd.ms-excel\" || file[0].type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n\n    if (!isExcel) {\n      errorMessage = \"You can only upload Excel file!\";\n    }\n\n    console.log(\"file\", file[0].type);\n    const isLt2M = file[0].size / 1024 / 1024 < 2;\n\n    if (!isLt2M) {\n      errorMessage = \"File must be smaller than 2MB!\";\n    }\n\n    console.log(\"errorMessage\", errorMessage);\n    return errorMessage;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"GeeksforGeeks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Upload using React!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.onFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onFileUpload,\n          children: \"Upload!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), this.fileData()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/appsk/Documents/Projects/PredictiveMaintenance/React PDM/env/frontend/src/App.js"],"names":["axios","React","Component","App","onFileChange","fileList","console","log","fileObj","setState","errorMessage","type","ExcelRenderer","err","resp","newRows","rows","slice","map","row","index","push","key","name","age","gender","length","cols","onFileUpload","state","selectedFile","fileData","lastModifiedDate","toDateString","checkFile","file","isExcel","isLt2M","size","render"],"mappings":"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","sourcesContent":["import axios from 'axios'; \n  \nimport React,{Component} from 'react'; \n  \nclass App extends Component { \n\n  checkFile(file) {\n    let errorMessage = \"\";\n    if (!file || !file[0]) {\n      return;\n    }\n    const isExcel =\n      file[0].type === \"application/vnd.ms-excel\" ||\n      file[0].type ===\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n    if (!isExcel) {\n      errorMessage = \"You can only upload Excel file!\";\n    }\n    console.log(\"file\", file[0].type);\n    const isLt2M = file[0].size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      errorMessage = \"File must be smaller than 2MB!\";\n    }\n    console.log(\"errorMessage\", errorMessage);\n    return errorMessage;\n  }\n\n\n  onFileChange = fileList => {\n    console.log(\"fileList\", fileList)\n    let fileObj = fileList\n    if (!fileObj) {\n      this.setState({\n        errorMessage: \"No file uploaded!\",\n      })\n      return false\n    }\n    console.log(\"fileObj.type:\", fileObj.type)\n    if (\n      !(\n        fileObj.type === \"application/vnd.ms-excel\" ||\n        fileObj.type ===\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n      )\n    ) {\n      this.setState({\n        errorMessage: \"Unknown file format. Only Excel files are uploaded!\",\n      })\n      return false\n    }\n    //just pass the fileObj as parameter\n    ExcelRenderer(fileObj, (err, resp) => {\n      if (err) {\n        console.log(err)\n      } else {\n        let newRows = []\n        resp.rows.slice(1).map((row, index) => {\n          if (row && row !== \"undefined\") {\n            newRows.push({\n              key: index,\n              name: row[0],\n              age: row[1],\n              gender: row[2],\n            })\n          }\n        })\n        if (newRows.length === 0) {\n          this.setState({\n            errorMessage: \"No data found in file!\",\n          })\n          return false\n        } else {\n          this.setState({\n            cols: resp.cols,\n            rows: newRows,\n            errorMessage: null,\n          })\n        }\n      }\n    })\n    return false\n  }\n\n  onFileUpload = async () => {\n  console.log(\"submitting: \", this.state.rows)\n  //submit to API\n  //if successful, banigate and clear the data\n  //this.setState({ rows: [] })\n}\n\n\n   \n    state = { \n  \n      // Initially, no file is selected \n      selectedFile: null\n    }; \n     \n    // On file select (from the pop up) \n    // onFileChange = event => { \n     \n    //   // Update the state \n    //   this.setState({ selectedFile: event.target.files[0] }); \n     \n    // }; \n     \n    // // On file upload (click the upload button) \n    // onFileUpload = () => { \n     \n    //   // Create an object of formData \n    //   const formData = new FormData(); \n     \n    //   // Update the formData object \n    //   formData.append( \n    //     \"myFile\", \n    //     this.state.selectedFile, \n    //     this.state.selectedFile.name \n    //   ); \n     \n    //   // Details of the uploaded file \n    //   console.log(this.state.selectedFile); \n     \n    //   // Request made to the backend api \n    //   // Send formData object \n    //   axios.post(\"api/uploadfile\", formData); \n    // }; \n     \n    // File content to be displayed after \n    // file upload is complete \n    fileData = () => { \n     \n      if (this.state.selectedFile) { \n          \n        return ( \n          <div> \n            <h2>File Details:</h2> \n            <p>File Name: {this.state.selectedFile.name}</p> \n            <p>File Type: {this.state.selectedFile.type}</p> \n            <p> \n              Last Modified:{\" \"} \n              {this.state.selectedFile.lastModifiedDate.toDateString()} \n            </p> \n          </div> \n        ); \n      } else { \n        return ( \n          <div> \n            <br /> \n            <h4>Choose before Pressing the Upload button</h4> \n          </div> \n        ); \n      } \n    }; \n     \n    render() { \n     \n      return ( \n        <div> \n            <h1> \n              GeeksforGeeks \n            </h1> \n            <h3> \n              File Upload using React! \n            </h3> \n            <div> \n                <input type=\"file\" onChange={this.onFileChange} /> \n                <button onClick={this.onFileUpload}> \n                  Upload! \n                </button> \n            </div> \n          {this.fileData()} \n        </div> \n      ); \n    } \n  } \n  \n  export default App; "]},"metadata":{},"sourceType":"module"}