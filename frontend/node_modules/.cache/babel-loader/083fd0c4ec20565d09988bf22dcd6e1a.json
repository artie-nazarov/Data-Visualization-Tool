{"ast":null,"code":"import { remove } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend, isBlazor, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { doesImplementInterface, setStyleAndAttributes, appendChildren, extendObjWithFn } from '../base/util';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { foreignKeyData } from '../base/constant';\n/**\n * CellRenderer class which responsible for building cell content.\n * @hidden\n */\n\nvar CellRenderer =\n/** @class */\nfunction () {\n  function CellRenderer(parent, locator) {\n    this.localizer = locator.getService('localization');\n    this.formatter = locator.getService('valueFormatter');\n    this.parent = parent;\n    this.element = this.parent.createElement('TD', {\n      className: 'e-rowcell',\n      attrs: {\n        role: 'gridcell',\n        tabindex: '-1'\n      }\n    });\n    this.rowChkBox = this.parent.createElement('input', {\n      className: 'e-checkselect',\n      attrs: {\n        'type': 'checkbox'\n      }\n    });\n  }\n  /**\n   * Function to return the wrapper for the TD content\n   * @returns string\n   */\n\n\n  CellRenderer.prototype.getGui = function () {\n    return '';\n  };\n  /**\n   * Function to format the cell value.\n   * @param  {Column} column\n   * @param  {Object} value\n   * @param  {Object} data\n   */\n\n\n  CellRenderer.prototype.format = function (column, value, data) {\n    if (!isNullOrUndefined(column.format)) {\n      if (column.type === 'number' && isNaN(parseInt(value, 10))) {\n        value = null;\n      }\n\n      value = this.formatter.toView(value, column.getFormatter());\n    }\n\n    return isNullOrUndefined(value) ? '' : value.toString();\n  };\n\n  CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData, isEdit) {\n    var _a;\n\n    var result;\n\n    if (cell.column.template) {\n      var isReactCompiler = this.parent.isReact && typeof cell.column.template !== 'string';\n      var literals = ['index'];\n      var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));\n      var templateID = this.parent.element.id + cell.column.uid;\n      var str = 'isStringTemplate';\n      var index = 'index';\n\n      if (isBlazor() && isEdit) {\n        var rNumber = this.parent.editSettings.mode !== 'Batch' ? parseInt(attributes[index], 10) : null;\n        result = cell.column.getColumnTemplate()(extend({\n          'index': attributes[literals[0]]\n        }, dummyData), this.parent, 'template', templateID, this.parent[str], rNumber);\n        window[templateID] = null;\n\n        if (this.parent.editSettings.mode !== 'Batch') {\n          updateBlazorTemplate(templateID, 'Template', cell.column, false);\n        }\n      } else {\n        if (isReactCompiler) {\n          var copied = {\n            'index': attributes[literals[0]]\n          };\n          cell.column.getColumnTemplate()(extend(copied, dummyData), this.parent, 'columnTemplate', templateID, this.parent[str], null, node);\n          this.parent.renderTemplates();\n        } else {\n          result = cell.column.getColumnTemplate()(extend({\n            'index': attributes[literals[0]]\n          }, dummyData), this.parent, 'template', templateID, this.parent[str]);\n        }\n      }\n\n      if (!isReactCompiler) {\n        appendChildren(node, result);\n      }\n\n      this.parent.notify('template-result', {\n        template: result\n      });\n      result = null;\n      node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' + cell.column.headerText);\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Function to invoke the custom formatter available in the column object.\n   * @param  {Column} column\n   * @param  {Object} value\n   * @param  {Object} data\n   */\n\n\n  CellRenderer.prototype.invokeFormatter = function (column, value, data) {\n    if (!isNullOrUndefined(column.formatter)) {\n      if (doesImplementInterface(column.formatter, 'getValue')) {\n        var formatter = column.formatter;\n        value = new formatter().getValue(column, data);\n      } else if (typeof column.formatter === 'function') {\n        value = column.formatter(column, data);\n      } else {\n        value = column.formatter.getValue(column, data);\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Function to render the cell content based on Column object.\n   * @param  {Column} column\n   * @param  {Object} data\n   * @param  {{[x:string]:Object}} attributes?\n   * @param  {Element}\n   */\n\n\n  CellRenderer.prototype.render = function (cell, data, attributes, isExpand, isEdit) {\n    return this.refreshCell(cell, data, attributes, isEdit);\n  };\n  /**\n   * Function to refresh the cell content based on Column object.\n   * @param  {Column} column\n   * @param  {Object} data\n   * @param  {{[x:string]:Object}} attributes?\n   * @param  {Element}\n   */\n\n\n  CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {\n    var isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');\n\n    if (this.parent.isReact) {\n      td.innerHTML = '';\n      var cellIndex = td.cellIndex;\n      var parentRow = td.parentElement;\n      remove(td);\n      var newTD = this.refreshCell(cell, data, attributes, isEdit);\n      this.cloneAttributes(newTD, td);\n      parentRow.cells.length !== cellIndex - 1 ? parentRow.insertBefore(newTD, parentRow.cells[cellIndex]) : parentRow.appendChild(newTD);\n    } else {\n      var node = this.refreshCell(cell, data, attributes, isEdit);\n      td.innerHTML = '';\n      td.setAttribute('aria-label', node.getAttribute('aria-label'));\n      var elements = [].slice.call(node.childNodes);\n\n      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n        var elem = elements_1[_i];\n        td.appendChild(elem);\n      }\n    }\n  }; // tslint:disable-next-line:no-any\n\n\n  CellRenderer.prototype.cloneAttributes = function (target, source) {\n    // tslint:disable-next-line:no-any\n    var attrs = source.attributes; // tslint:disable-next-line:no-any\n\n    var i = attrs.length; // tslint:disable-next-line:no-any\n\n    var attr;\n\n    while (i--) {\n      attr = attrs[i];\n      target.setAttribute(attr.name, attr.value);\n    }\n  };\n\n  CellRenderer.prototype.refreshCell = function (cell, data, attributes, isEdit) {\n    var _a;\n\n    var node = this.element.cloneNode();\n    var column = cell.column;\n    var fData;\n\n    if (cell.isForeignKey) {\n      fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);\n    } //Prepare innerHtml\n\n\n    var innerHtml = this.getGui();\n    var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) : this.getValue(column.field, data, column);\n\n    if ((column.type === 'date' || column.type === 'datetime') && !isNullOrUndefined(value)) {\n      value = new Date(value);\n    }\n\n    value = this.format(column, value, data);\n    innerHtml = value.toString();\n\n    if (column.type === 'boolean' && !column.displayAsCheckBox) {\n      var localeStr = value !== 'true' && value !== 'false' ? null : value === 'true' ? 'True' : 'False';\n      innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;\n    }\n\n    var fromFormatter = this.invokeFormatter(column, value, data);\n    innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;\n    node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);\n\n    if (this.evaluate(node, cell, data, attributes, fData, isEdit) && column.type !== 'checkbox') {\n      this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');\n    } else if (column.type === 'checkbox') {\n      node.classList.add('e-gridchkbox');\n      node.setAttribute('aria-label', 'checkbox');\n\n      if (this.parent.selectionSettings.persistSelection) {\n        value = value === 'true';\n      } else {\n        value = false;\n      }\n\n      var checkWrap = createCheckBox(this.parent.createElement, false, {\n        checked: value,\n        label: ' '\n      });\n      checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);\n      node.appendChild(checkWrap);\n    }\n\n    if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n      cell.isSelected = true;\n    }\n\n    this.setAttributes(node, cell, attributes);\n\n    if (column.type === 'boolean' && column.displayAsCheckBox) {\n      var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;\n      var checkWrap = createCheckBox(this.parent.createElement, false, {\n        checked: checked,\n        label: ' '\n      });\n      node.innerHTML = '';\n      checkWrap.classList.add('e-checkbox-disabled');\n      node.appendChild(checkWrap);\n      node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);\n    }\n\n    return node;\n  };\n  /**\n   * Function to specifies how the result content to be placed in the cell.\n   * @param  {Element} node\n   * @param  {string|Element} innerHtml\n   * @returns Element\n   */\n\n\n  CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {\n    if (property === void 0) {\n      property = 'innerHTML';\n    }\n\n    node[property] = innerHtml;\n    return node;\n  };\n  /**\n   * @hidden\n   */\n\n\n  CellRenderer.prototype.setAttributes = function (node, cell, attributes) {\n    var column = cell.column;\n    this.buildAttributeFromCell(node, cell, column.type === 'checkbox');\n    setStyleAndAttributes(node, attributes);\n    setStyleAndAttributes(node, cell.attributes);\n\n    if (column.customAttributes) {\n      setStyleAndAttributes(node, column.customAttributes);\n    }\n\n    if (column.textAlign) {\n      node.style.textAlign = column.textAlign;\n    }\n\n    if (column.clipMode === 'Clip' || !column.clipMode && this.parent.clipMode === 'Clip') {\n      node.classList.add('e-gridclip');\n    } else if (column.clipMode === 'EllipsisWithTooltip' || !column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip') {\n      if (column.type !== 'checkbox') {\n        node.classList.add('e-ellipsistooltip');\n      }\n    }\n  };\n\n  CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {\n    var attr = {};\n    var prop = {\n      'colindex': 'aria-colindex'\n    };\n    var classes = [];\n\n    if (cell.colSpan) {\n      attr.colSpan = cell.colSpan;\n    }\n\n    if (cell.rowSpan) {\n      attr.rowSpan = cell.rowSpan;\n    }\n\n    if (cell.isTemplate) {\n      classes.push('e-templatecell');\n    }\n\n    if (cell.isSelected) {\n      classes.push.apply(classes, ['e-selectionbackground', 'e-active']);\n\n      if (isCheckBoxType) {\n        node.querySelector('.e-frame').classList.add('e-check');\n      }\n    }\n\n    if (cell.isColumnSelected) {\n      classes.push.apply(classes, ['e-columnselection']);\n    }\n\n    if (!isNullOrUndefined(cell.index)) {\n      attr[prop.colindex] = cell.index;\n    }\n\n    if (!cell.visible && !cell.isDataCell || !isNullOrUndefined(cell.column.visible) && !cell.column.visible) {\n      classes.push('e-hide');\n    }\n\n    attr.class = classes;\n    setStyleAndAttributes(node, attr);\n  };\n\n  CellRenderer.prototype.getValue = function (field, data, column) {\n    return column.valueAccessor(field, data, column);\n  };\n\n  return CellRenderer;\n}();\n\nexport { CellRenderer };","map":{"version":3,"sources":["C:/Users/appsk/Documents/Projects/PredictiveMaintenance/React PDM/env/frontend/node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js"],"names":["remove","isNullOrUndefined","extend","isBlazor","updateBlazorTemplate","doesImplementInterface","setStyleAndAttributes","appendChildren","extendObjWithFn","createCheckBox","foreignKeyData","CellRenderer","parent","locator","localizer","getService","formatter","element","createElement","className","attrs","role","tabindex","rowChkBox","prototype","getGui","format","column","value","data","type","isNaN","parseInt","toView","getFormatter","toString","evaluate","node","cell","attributes","fData","isEdit","_a","result","template","isReactCompiler","isReact","literals","dummyData","templateID","id","uid","str","index","rNumber","editSettings","mode","getColumnTemplate","window","copied","renderTemplates","notify","setAttribute","innerText","headerText","invokeFormatter","getValue","render","isExpand","refreshCell","refreshTD","td","classList","contains","innerHTML","cellIndex","parentRow","parentElement","newTD","cloneAttributes","cells","length","insertBefore","appendChild","getAttribute","elements","slice","call","childNodes","_i","elements_1","elem","target","source","i","attr","name","cloneNode","isForeignKey","foreignKeyValue","innerHtml","field","Date","displayAsCheckBox","localeStr","getConstant","fromFormatter","appendHtml","getDomSetter","add","selectionSettings","persistSelection","checkWrap","checked","label","firstChild","checkAllRows","enableVirtualization","isSelected","setAttributes","property","buildAttributeFromCell","customAttributes","textAlign","style","clipMode","isCheckBoxType","prop","classes","colSpan","rowSpan","isTemplate","push","apply","querySelector","isColumnSelected","colindex","visible","isDataCell","class","valueAccessor"],"mappings":"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","sourcesContent":["import { remove } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend, isBlazor, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { doesImplementInterface, setStyleAndAttributes, appendChildren, extendObjWithFn } from '../base/util';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { foreignKeyData } from '../base/constant';\n/**\n * CellRenderer class which responsible for building cell content.\n * @hidden\n */\nvar CellRenderer = /** @class */ (function () {\n    function CellRenderer(parent, locator) {\n        this.localizer = locator.getService('localization');\n        this.formatter = locator.getService('valueFormatter');\n        this.parent = parent;\n        this.element = this.parent.createElement('TD', { className: 'e-rowcell', attrs: { role: 'gridcell', tabindex: '-1' } });\n        this.rowChkBox = this.parent.createElement('input', { className: 'e-checkselect', attrs: { 'type': 'checkbox' } });\n    }\n    /**\n     * Function to return the wrapper for the TD content\n     * @returns string\n     */\n    CellRenderer.prototype.getGui = function () {\n        return '';\n    };\n    /**\n     * Function to format the cell value.\n     * @param  {Column} column\n     * @param  {Object} value\n     * @param  {Object} data\n     */\n    CellRenderer.prototype.format = function (column, value, data) {\n        if (!isNullOrUndefined(column.format)) {\n            if (column.type === 'number' && isNaN(parseInt(value, 10))) {\n                value = null;\n            }\n            value = this.formatter.toView(value, column.getFormatter());\n        }\n        return isNullOrUndefined(value) ? '' : value.toString();\n    };\n    CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData, isEdit) {\n        var _a;\n        var result;\n        if (cell.column.template) {\n            var isReactCompiler = this.parent.isReact && typeof (cell.column.template) !== 'string';\n            var literals = ['index'];\n            var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));\n            var templateID = this.parent.element.id + cell.column.uid;\n            var str = 'isStringTemplate';\n            var index = 'index';\n            if (isBlazor() && isEdit) {\n                var rNumber = this.parent.editSettings.mode !== 'Batch' ? parseInt(attributes[index], 10) : null;\n                result = cell.column.getColumnTemplate()(extend({ 'index': attributes[literals[0]] }, dummyData), this.parent, 'template', templateID, this.parent[str], rNumber);\n                window[templateID] = null;\n                if (this.parent.editSettings.mode !== 'Batch') {\n                    updateBlazorTemplate(templateID, 'Template', cell.column, false);\n                }\n            }\n            else {\n                if (isReactCompiler) {\n                    var copied = { 'index': attributes[literals[0]] };\n                    cell.column.getColumnTemplate()(extend(copied, dummyData), this.parent, 'columnTemplate', templateID, this.parent[str], null, node);\n                    this.parent.renderTemplates();\n                }\n                else {\n                    result = cell.column.getColumnTemplate()(extend({ 'index': attributes[literals[0]] }, dummyData), this.parent, 'template', templateID, this.parent[str]);\n                }\n            }\n            if (!isReactCompiler) {\n                appendChildren(node, result);\n            }\n            this.parent.notify('template-result', { template: result });\n            result = null;\n            node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' +\n                cell.column.headerText);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Function to invoke the custom formatter available in the column object.\n     * @param  {Column} column\n     * @param  {Object} value\n     * @param  {Object} data\n     */\n    CellRenderer.prototype.invokeFormatter = function (column, value, data) {\n        if (!isNullOrUndefined(column.formatter)) {\n            if (doesImplementInterface(column.formatter, 'getValue')) {\n                var formatter = column.formatter;\n                value = new formatter().getValue(column, data);\n            }\n            else if (typeof column.formatter === 'function') {\n                value = column.formatter(column, data);\n            }\n            else {\n                value = column.formatter.getValue(column, data);\n            }\n        }\n        return value;\n    };\n    /**\n     * Function to render the cell content based on Column object.\n     * @param  {Column} column\n     * @param  {Object} data\n     * @param  {{[x:string]:Object}} attributes?\n     * @param  {Element}\n     */\n    CellRenderer.prototype.render = function (cell, data, attributes, isExpand, isEdit) {\n        return this.refreshCell(cell, data, attributes, isEdit);\n    };\n    /**\n     * Function to refresh the cell content based on Column object.\n     * @param  {Column} column\n     * @param  {Object} data\n     * @param  {{[x:string]:Object}} attributes?\n     * @param  {Element}\n     */\n    CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {\n        var isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');\n        if (this.parent.isReact) {\n            td.innerHTML = '';\n            var cellIndex = td.cellIndex;\n            var parentRow = td.parentElement;\n            remove(td);\n            var newTD = this.refreshCell(cell, data, attributes, isEdit);\n            this.cloneAttributes(newTD, td);\n            parentRow.cells.length !== cellIndex - 1 ? parentRow.insertBefore(newTD, parentRow.cells[cellIndex])\n                : parentRow.appendChild(newTD);\n        }\n        else {\n            var node = this.refreshCell(cell, data, attributes, isEdit);\n            td.innerHTML = '';\n            td.setAttribute('aria-label', node.getAttribute('aria-label'));\n            var elements = [].slice.call(node.childNodes);\n            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n                var elem = elements_1[_i];\n                td.appendChild(elem);\n            }\n        }\n    };\n    // tslint:disable-next-line:no-any\n    CellRenderer.prototype.cloneAttributes = function (target, source) {\n        // tslint:disable-next-line:no-any\n        var attrs = source.attributes;\n        // tslint:disable-next-line:no-any\n        var i = attrs.length;\n        // tslint:disable-next-line:no-any\n        var attr;\n        while (i--) {\n            attr = attrs[i];\n            target.setAttribute(attr.name, attr.value);\n        }\n    };\n    CellRenderer.prototype.refreshCell = function (cell, data, attributes, isEdit) {\n        var _a;\n        var node = this.element.cloneNode();\n        var column = cell.column;\n        var fData;\n        if (cell.isForeignKey) {\n            fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);\n        }\n        //Prepare innerHtml\n        var innerHtml = this.getGui();\n        var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) :\n            this.getValue(column.field, data, column);\n        if ((column.type === 'date' || column.type === 'datetime') && !isNullOrUndefined(value)) {\n            value = new Date(value);\n        }\n        value = this.format(column, value, data);\n        innerHtml = value.toString();\n        if (column.type === 'boolean' && !column.displayAsCheckBox) {\n            var localeStr = (value !== 'true' && value !== 'false') ? null : value === 'true' ? 'True' : 'False';\n            innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;\n        }\n        var fromFormatter = this.invokeFormatter(column, value, data);\n        innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;\n        node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);\n        if (this.evaluate(node, cell, data, attributes, fData, isEdit) && column.type !== 'checkbox') {\n            this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');\n        }\n        else if (column.type === 'checkbox') {\n            node.classList.add('e-gridchkbox');\n            node.setAttribute('aria-label', 'checkbox');\n            if (this.parent.selectionSettings.persistSelection) {\n                value = value === 'true';\n            }\n            else {\n                value = false;\n            }\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });\n            checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);\n            node.appendChild(checkWrap);\n        }\n        if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n            cell.isSelected = true;\n        }\n        this.setAttributes(node, cell, attributes);\n        if (column.type === 'boolean' && column.displayAsCheckBox) {\n            var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: checked, label: ' ' });\n            node.innerHTML = '';\n            checkWrap.classList.add('e-checkbox-disabled');\n            node.appendChild(checkWrap);\n            node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);\n        }\n        return node;\n    };\n    /**\n     * Function to specifies how the result content to be placed in the cell.\n     * @param  {Element} node\n     * @param  {string|Element} innerHtml\n     * @returns Element\n     */\n    CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {\n        if (property === void 0) { property = 'innerHTML'; }\n        node[property] = innerHtml;\n        return node;\n    };\n    /**\n     * @hidden\n     */\n    CellRenderer.prototype.setAttributes = function (node, cell, attributes) {\n        var column = cell.column;\n        this.buildAttributeFromCell(node, cell, column.type === 'checkbox');\n        setStyleAndAttributes(node, attributes);\n        setStyleAndAttributes(node, cell.attributes);\n        if (column.customAttributes) {\n            setStyleAndAttributes(node, column.customAttributes);\n        }\n        if (column.textAlign) {\n            node.style.textAlign = column.textAlign;\n        }\n        if (column.clipMode === 'Clip' || (!column.clipMode && this.parent.clipMode === 'Clip')) {\n            node.classList.add('e-gridclip');\n        }\n        else if (column.clipMode === 'EllipsisWithTooltip' || (!column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip')) {\n            if (column.type !== 'checkbox') {\n                node.classList.add('e-ellipsistooltip');\n            }\n        }\n    };\n    CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {\n        var attr = {};\n        var prop = { 'colindex': 'aria-colindex' };\n        var classes = [];\n        if (cell.colSpan) {\n            attr.colSpan = cell.colSpan;\n        }\n        if (cell.rowSpan) {\n            attr.rowSpan = cell.rowSpan;\n        }\n        if (cell.isTemplate) {\n            classes.push('e-templatecell');\n        }\n        if (cell.isSelected) {\n            classes.push.apply(classes, ['e-selectionbackground', 'e-active']);\n            if (isCheckBoxType) {\n                node.querySelector('.e-frame').classList.add('e-check');\n            }\n        }\n        if (cell.isColumnSelected) {\n            classes.push.apply(classes, ['e-columnselection']);\n        }\n        if (!isNullOrUndefined(cell.index)) {\n            attr[prop.colindex] = cell.index;\n        }\n        if ((!cell.visible && !cell.isDataCell) ||\n            (!isNullOrUndefined(cell.column.visible) && !cell.column.visible)) {\n            classes.push('e-hide');\n        }\n        attr.class = classes;\n        setStyleAndAttributes(node, attr);\n    };\n    CellRenderer.prototype.getValue = function (field, data, column) {\n        return column.valueAccessor(field, data, column);\n    };\n    return CellRenderer;\n}());\nexport { CellRenderer };\n"]},"metadata":{},"sourceType":"module"}