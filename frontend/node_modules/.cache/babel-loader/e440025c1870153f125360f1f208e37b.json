{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\appsk\\\\Documents\\\\Projects\\\\PredictiveMaintenance\\\\React PDM\\\\env\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\nimport { SheetJSFT } from './types';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.jsonFormat = null;\n    this.state = {\n      file: {},\n      data: [],\n      cols: []\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], {\n      type: contentType\n    });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.setState({\n      file: files[0]\n    });\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    const groupBy = require('json-groupby');\n\n    reader.onload = e => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n      /* Update state */\n\n      this.setState({\n        data: data,\n        cols: make_cols(ws['!ref'])\n      }, () => {\n        // Replacer function\n        function replacer(key, value) {\n          if (value == null) {\n            return undefined;\n          }\n\n          return value;\n        }\n\n        const strData = JSON.stringify(this.state.data, replacer, 2);\n        const jsonObject = JSON.parse(strData); // Loop through each row in dataset\n        //console.log(jsonObject);\n\n        console.log(groupBy(jsonObject, ['Equipment ID'])); // jsonObject.forEach(elemnt =>  {\n        //   console.log(jsonObject[0]);\n        // });\n      });\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(this.state.file);\n    } else {\n      reader.readAsArrayBuffer(this.state.file);\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: \"Upload your Excel File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"form-control\",\n        id: \"file\",\n        accept: SheetJSFT,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Update\",\n        onClick: this.handleFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/appsk/Documents/Projects/PredictiveMaintenance/React PDM/env/frontend/src/App.js"],"names":["React","Component","Fabric","DefaultButton","XLSX","make_cols","SheetJSFT","App","constructor","props","jsonFormat","state","file","data","cols","handleFile","bind","handleChange","download","content","fileName","contentType","a","document","createElement","Blob","type","href","URL","createObjectURL","click","e","files","target","setState","reader","FileReader","rABS","readAsBinaryString","groupBy","require","onload","bstr","result","wb","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","replacer","key","value","undefined","strData","JSON","stringify","jsonObject","parse","console","log","readAsArrayBuffer","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\nimport { SheetJSFT } from './types';\n \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.jsonFormat = null;\n    this.state = {\n      file: {},\n      data: [],\n      cols: []\n    }\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n\n   download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], {type: contentType});\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n}\n \n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.setState({ file: files[0] });\n  };\n \n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    const groupBy = require('json-groupby');\n\n \n    reader.onload = (e) => {\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n\n      /* Update state */\n      this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\n          // Replacer function\n        function replacer(key, value) {\n          if (value == null) {\n            return undefined;\n          }\n          return value;\n        }\n        const strData = JSON.stringify(this.state.data, replacer, 2)\n        const jsonObject = JSON.parse(strData);\n\n        // Loop through each row in dataset\n        //console.log(jsonObject);\n        console.log(groupBy(jsonObject, ['Equipment ID']));\n        // jsonObject.forEach(elemnt =>  {\n        //   console.log(jsonObject[0]);\n        // });\n\n      });\n    };\n    if (rABS) {\n      reader.readAsBinaryString(this.state.file);\n    } else {\n      reader.readAsArrayBuffer(this.state.file);\n    };\n  }\n \n  render() {\n    return (\n      <div>\n        <label htmlFor=\"file\">Upload your Excel File</label>\n        <br />\n        <input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={this.handleChange} />\n        <br />\n        <input type='submit' \n          value=\"Update\"\n          onClick={this.handleFile} />\n          </div>\n      \n    )\n  }\n}\n \nexport default App;"]},"metadata":{},"sourceType":"module"}